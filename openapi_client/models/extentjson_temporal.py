# coding: utf-8

"""
    Daraa

    This data store is offered by CubeWerx Inc. as a demonstration of its in-progress OGC API implementation.  # noqa: E501

    The version of the OpenAPI document: 9.3.45
    Contact: mgalluch@cubewerx.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ExtentjsonTemporal(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'interval': 'list[list[datetime]]',
        'trs': 'str'
    }

    attribute_map = {
        'interval': 'interval',
        'trs': 'trs'
    }

    def __init__(self, interval=None, trs='http://www.opengis.net/def/uom/ISO-8601/0/Gregorian'):  # noqa: E501
        """ExtentjsonTemporal - a model defined in OpenAPI"""  # noqa: E501

        self._interval = None
        self._trs = None
        self.discriminator = None

        if interval is not None:
            self.interval = interval
        if trs is not None:
            self.trs = trs

    @property
    def interval(self):
        """Gets the interval of this ExtentjsonTemporal.  # noqa: E501


        :return: The interval of this ExtentjsonTemporal.  # noqa: E501
        :rtype: list[list[datetime]]
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this ExtentjsonTemporal.


        :param interval: The interval of this ExtentjsonTemporal.  # noqa: E501
        :type: list[list[datetime]]
        """

        self._interval = interval

    @property
    def trs(self):
        """Gets the trs of this ExtentjsonTemporal.  # noqa: E501

        Temporal reference system of the coordinates in the temporal extent (property `temporal`).  In the Core, only the Gregorian calendar is supported.  Extensions may support additional temporal reference systems.  # noqa: E501

        :return: The trs of this ExtentjsonTemporal.  # noqa: E501
        :rtype: str
        """
        return self._trs

    @trs.setter
    def trs(self, trs):
        """Sets the trs of this ExtentjsonTemporal.

        Temporal reference system of the coordinates in the temporal extent (property `temporal`).  In the Core, only the Gregorian calendar is supported.  Extensions may support additional temporal reference systems.  # noqa: E501

        :param trs: The trs of this ExtentjsonTemporal.  # noqa: E501
        :type: str
        """
        allowed_values = ["http://www.opengis.net/def/uom/ISO-8601/0/Gregorian"]  # noqa: E501
        if trs not in allowed_values:
            raise ValueError(
                "Invalid value for `trs` ({0}), must be one of {1}"  # noqa: E501
                .format(trs, allowed_values)
            )

        self._trs = trs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExtentjsonTemporal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
