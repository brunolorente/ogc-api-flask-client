# coding: utf-8

"""
    Daraa

    This data store is offered by CubeWerx Inc. as a demonstration of its in-progress OGC API implementation.  # noqa: E501

    The version of the OpenAPI document: 9.3.45
    Contact: mgalluch@cubewerx.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ExtentxmlSpatialExtents(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'crs': 'str',
        'dimensions': 'int',
        'lower_corner': 'list[float]',
        'upper_corner': 'list[float]'
    }

    attribute_map = {
        'crs': 'crs',
        'dimensions': 'dimensions',
        'lower_corner': 'LowerCorner',
        'upper_corner': 'UpperCorner'
    }

    def __init__(self, crs='http://www.opengis.net/def/crs/OGC/1.3/CRS84', dimensions=2, lower_corner=None, upper_corner=None):  # noqa: E501
        """ExtentxmlSpatialExtents - a model defined in OpenAPI"""  # noqa: E501

        self._crs = None
        self._dimensions = None
        self._lower_corner = None
        self._upper_corner = None
        self.discriminator = None

        if crs is not None:
            self.crs = crs
        if dimensions is not None:
            self.dimensions = dimensions
        if lower_corner is not None:
            self.lower_corner = lower_corner
        if upper_corner is not None:
            self.upper_corner = upper_corner

    @property
    def crs(self):
        """Gets the crs of this ExtentxmlSpatialExtents.  # noqa: E501


        :return: The crs of this ExtentxmlSpatialExtents.  # noqa: E501
        :rtype: str
        """
        return self._crs

    @crs.setter
    def crs(self, crs):
        """Sets the crs of this ExtentxmlSpatialExtents.


        :param crs: The crs of this ExtentxmlSpatialExtents.  # noqa: E501
        :type: str
        """

        self._crs = crs

    @property
    def dimensions(self):
        """Gets the dimensions of this ExtentxmlSpatialExtents.  # noqa: E501


        :return: The dimensions of this ExtentxmlSpatialExtents.  # noqa: E501
        :rtype: int
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this ExtentxmlSpatialExtents.


        :param dimensions: The dimensions of this ExtentxmlSpatialExtents.  # noqa: E501
        :type: int
        """
        if dimensions is not None and dimensions < 2:  # noqa: E501
            raise ValueError("Invalid value for `dimensions`, must be a value greater than or equal to `2`")  # noqa: E501

        self._dimensions = dimensions

    @property
    def lower_corner(self):
        """Gets the lower_corner of this ExtentxmlSpatialExtents.  # noqa: E501


        :return: The lower_corner of this ExtentxmlSpatialExtents.  # noqa: E501
        :rtype: list[float]
        """
        return self._lower_corner

    @lower_corner.setter
    def lower_corner(self, lower_corner):
        """Sets the lower_corner of this ExtentxmlSpatialExtents.


        :param lower_corner: The lower_corner of this ExtentxmlSpatialExtents.  # noqa: E501
        :type: list[float]
        """

        self._lower_corner = lower_corner

    @property
    def upper_corner(self):
        """Gets the upper_corner of this ExtentxmlSpatialExtents.  # noqa: E501


        :return: The upper_corner of this ExtentxmlSpatialExtents.  # noqa: E501
        :rtype: list[float]
        """
        return self._upper_corner

    @upper_corner.setter
    def upper_corner(self, upper_corner):
        """Sets the upper_corner of this ExtentxmlSpatialExtents.


        :param upper_corner: The upper_corner of this ExtentxmlSpatialExtents.  # noqa: E501
        :type: list[float]
        """

        self._upper_corner = upper_corner

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExtentxmlSpatialExtents):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
