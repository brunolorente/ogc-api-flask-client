# coding: utf-8

"""
    Daraa

    This data store is offered by CubeWerx Inc. as a demonstration of its in-progress OGC API implementation.  # noqa: E501

    The version of the OpenAPI document: 9.3.45
    Contact: mgalluch@cubewerx.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CollectionInfoJson(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'title': 'str',
        'description': 'str',
        'links': 'list[LinkJson]',
        'extent': 'ExtentJson',
        'item_type': 'str',
        'storage_crs': 'str',
        'crs': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'description': 'description',
        'links': 'links',
        'extent': 'extent',
        'item_type': 'itemType',
        'storage_crs': 'storageCrs',
        'crs': 'crs'
    }

    def __init__(self, id=None, title=None, description=None, links=None, extent=None, item_type='unknown', storage_crs=None, crs=["http://www.opengis.net/def/crs/OGC/1.3/CRS84"]):  # noqa: E501
        """CollectionInfoJson - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._title = None
        self._description = None
        self._links = None
        self._extent = None
        self._item_type = None
        self._storage_crs = None
        self._crs = None
        self.discriminator = None

        self.id = id
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        self.links = links
        if extent is not None:
            self.extent = extent
        if item_type is not None:
            self.item_type = item_type
        if storage_crs is not None:
            self.storage_crs = storage_crs
        if crs is not None:
            self.crs = crs

    @property
    def id(self):
        """Gets the id of this CollectionInfoJson.  # noqa: E501

        The identifier of the collection.  # noqa: E501

        :return: The id of this CollectionInfoJson.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CollectionInfoJson.

        The identifier of the collection.  # noqa: E501

        :param id: The id of this CollectionInfoJson.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def title(self):
        """Gets the title of this CollectionInfoJson.  # noqa: E501

        A human readable title of the collection.  # noqa: E501

        :return: The title of this CollectionInfoJson.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CollectionInfoJson.

        A human readable title of the collection.  # noqa: E501

        :param title: The title of this CollectionInfoJson.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this CollectionInfoJson.  # noqa: E501

        A description of the members of the collection.  # noqa: E501

        :return: The description of this CollectionInfoJson.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CollectionInfoJson.

        A description of the members of the collection.  # noqa: E501

        :param description: The description of this CollectionInfoJson.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def links(self):
        """Gets the links of this CollectionInfoJson.  # noqa: E501


        :return: The links of this CollectionInfoJson.  # noqa: E501
        :rtype: list[LinkJson]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this CollectionInfoJson.


        :param links: The links of this CollectionInfoJson.  # noqa: E501
        :type: list[LinkJson]
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")  # noqa: E501

        self._links = links

    @property
    def extent(self):
        """Gets the extent of this CollectionInfoJson.  # noqa: E501


        :return: The extent of this CollectionInfoJson.  # noqa: E501
        :rtype: ExtentJson
        """
        return self._extent

    @extent.setter
    def extent(self, extent):
        """Sets the extent of this CollectionInfoJson.


        :param extent: The extent of this CollectionInfoJson.  # noqa: E501
        :type: ExtentJson
        """

        self._extent = extent

    @property
    def item_type(self):
        """Gets the item_type of this CollectionInfoJson.  # noqa: E501

        An indicator about the type of the items in the collection.  # noqa: E501

        :return: The item_type of this CollectionInfoJson.  # noqa: E501
        :rtype: str
        """
        return self._item_type

    @item_type.setter
    def item_type(self, item_type):
        """Sets the item_type of this CollectionInfoJson.

        An indicator about the type of the items in the collection.  # noqa: E501

        :param item_type: The item_type of this CollectionInfoJson.  # noqa: E501
        :type: str
        """

        self._item_type = item_type

    @property
    def storage_crs(self):
        """Gets the storage_crs of this CollectionInfoJson.  # noqa: E501

        The coordinate reference system that may be used to retrieve features from this collection without the need to apply a CRS transformation.  # noqa: E501

        :return: The storage_crs of this CollectionInfoJson.  # noqa: E501
        :rtype: str
        """
        return self._storage_crs

    @storage_crs.setter
    def storage_crs(self, storage_crs):
        """Sets the storage_crs of this CollectionInfoJson.

        The coordinate reference system that may be used to retrieve features from this collection without the need to apply a CRS transformation.  # noqa: E501

        :param storage_crs: The storage_crs of this CollectionInfoJson.  # noqa: E501
        :type: str
        """

        self._storage_crs = storage_crs

    @property
    def crs(self):
        """Gets the crs of this CollectionInfoJson.  # noqa: E501

        The list of coordinate reference systems supported by the API.  The first item is the default coordinate reference system.  # noqa: E501

        :return: The crs of this CollectionInfoJson.  # noqa: E501
        :rtype: list[str]
        """
        return self._crs

    @crs.setter
    def crs(self, crs):
        """Sets the crs of this CollectionInfoJson.

        The list of coordinate reference systems supported by the API.  The first item is the default coordinate reference system.  # noqa: E501

        :param crs: The crs of this CollectionInfoJson.  # noqa: E501
        :type: list[str]
        """

        self._crs = crs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CollectionInfoJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
