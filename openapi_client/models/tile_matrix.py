# coding: utf-8

"""
    Daraa

    This data store is offered by CubeWerx Inc. as a demonstration of its in-progress OGC API implementation.  # noqa: E501

    The version of the OpenAPI document: 9.3.45
    Contact: mgalluch@cubewerx.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class TileMatrix(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'title': 'str',
        'abstract': 'str',
        'keywords': 'list[Keyword]',
        'identifier': 'str',
        'scale_denominator': 'float',
        'corner_of_origin': 'str',
        'point_of_origin': 'list[float]',
        'tile_width': 'float',
        'tile_height': 'float',
        'matrix_height': 'float',
        'matrix_width': 'float'
    }

    attribute_map = {
        'title': 'title',
        'abstract': 'abstract',
        'keywords': 'keywords',
        'identifier': 'identifier',
        'scale_denominator': 'scaleDenominator',
        'corner_of_origin': 'cornerOfOrigin',
        'point_of_origin': 'pointOfOrigin',
        'tile_width': 'tileWidth',
        'tile_height': 'tileHeight',
        'matrix_height': 'matrixHeight',
        'matrix_width': 'matrixWidth'
    }

    def __init__(self, title=None, abstract=None, keywords=None, identifier=None, scale_denominator=None, corner_of_origin='topLeft', point_of_origin=None, tile_width=None, tile_height=None, matrix_height=None, matrix_width=None):  # noqa: E501
        """TileMatrix - a model defined in OpenAPI"""  # noqa: E501

        self._title = None
        self._abstract = None
        self._keywords = None
        self._identifier = None
        self._scale_denominator = None
        self._corner_of_origin = None
        self._point_of_origin = None
        self._tile_width = None
        self._tile_height = None
        self._matrix_height = None
        self._matrix_width = None
        self.discriminator = None

        if title is not None:
            self.title = title
        if abstract is not None:
            self.abstract = abstract
        if keywords is not None:
            self.keywords = keywords
        self.identifier = identifier
        self.scale_denominator = scale_denominator
        if corner_of_origin is not None:
            self.corner_of_origin = corner_of_origin
        self.point_of_origin = point_of_origin
        self.tile_width = tile_width
        self.tile_height = tile_height
        self.matrix_height = matrix_height
        self.matrix_width = matrix_width

    @property
    def title(self):
        """Gets the title of this TileMatrix.  # noqa: E501

        Title of this tile matrix, normally used for display to a human  # noqa: E501

        :return: The title of this TileMatrix.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this TileMatrix.

        Title of this tile matrix, normally used for display to a human  # noqa: E501

        :param title: The title of this TileMatrix.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def abstract(self):
        """Gets the abstract of this TileMatrix.  # noqa: E501

        Brief narrative description of this tile matrix, normally available for display to a human  # noqa: E501

        :return: The abstract of this TileMatrix.  # noqa: E501
        :rtype: str
        """
        return self._abstract

    @abstract.setter
    def abstract(self, abstract):
        """Sets the abstract of this TileMatrix.

        Brief narrative description of this tile matrix, normally available for display to a human  # noqa: E501

        :param abstract: The abstract of this TileMatrix.  # noqa: E501
        :type: str
        """

        self._abstract = abstract

    @property
    def keywords(self):
        """Gets the keywords of this TileMatrix.  # noqa: E501

        keywords about the elements in the collection  # noqa: E501

        :return: The keywords of this TileMatrix.  # noqa: E501
        :rtype: list[Keyword]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this TileMatrix.

        keywords about the elements in the collection  # noqa: E501

        :param keywords: The keywords of this TileMatrix.  # noqa: E501
        :type: list[Keyword]
        """

        self._keywords = keywords

    @property
    def identifier(self):
        """Gets the identifier of this TileMatrix.  # noqa: E501

        Identifier selecting one of the scales defined in the TileMatrixSet and representing the scaleDenominator the tile.  # noqa: E501

        :return: The identifier of this TileMatrix.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this TileMatrix.

        Identifier selecting one of the scales defined in the TileMatrixSet and representing the scaleDenominator the tile.  # noqa: E501

        :param identifier: The identifier of this TileMatrix.  # noqa: E501
        :type: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501

        self._identifier = identifier

    @property
    def scale_denominator(self):
        """Gets the scale_denominator of this TileMatrix.  # noqa: E501

        Scale denominator level of this tile matrix  # noqa: E501

        :return: The scale_denominator of this TileMatrix.  # noqa: E501
        :rtype: float
        """
        return self._scale_denominator

    @scale_denominator.setter
    def scale_denominator(self, scale_denominator):
        """Sets the scale_denominator of this TileMatrix.

        Scale denominator level of this tile matrix  # noqa: E501

        :param scale_denominator: The scale_denominator of this TileMatrix.  # noqa: E501
        :type: float
        """
        if scale_denominator is None:
            raise ValueError("Invalid value for `scale_denominator`, must not be `None`")  # noqa: E501

        self._scale_denominator = scale_denominator

    @property
    def corner_of_origin(self):
        """Gets the corner_of_origin of this TileMatrix.  # noqa: E501

        Position of the corner of origin with respect of the tiles of this tile matrix  # noqa: E501

        :return: The corner_of_origin of this TileMatrix.  # noqa: E501
        :rtype: str
        """
        return self._corner_of_origin

    @corner_of_origin.setter
    def corner_of_origin(self, corner_of_origin):
        """Sets the corner_of_origin of this TileMatrix.

        Position of the corner of origin with respect of the tiles of this tile matrix  # noqa: E501

        :param corner_of_origin: The corner_of_origin of this TileMatrix.  # noqa: E501
        :type: str
        """
        allowed_values = ["topLeft", "bottonLeft"]  # noqa: E501
        if corner_of_origin not in allowed_values:
            raise ValueError(
                "Invalid value for `corner_of_origin` ({0}), must be one of {1}"  # noqa: E501
                .format(corner_of_origin, allowed_values)
            )

        self._corner_of_origin = corner_of_origin

    @property
    def point_of_origin(self):
        """Gets the point_of_origin of this TileMatrix.  # noqa: E501

        Position in CRS coordinates of the corner of origin of this tile matrix. In previous version was `topLeftCorner` and `cornerOfOrigin` did not exist.  # noqa: E501

        :return: The point_of_origin of this TileMatrix.  # noqa: E501
        :rtype: list[float]
        """
        return self._point_of_origin

    @point_of_origin.setter
    def point_of_origin(self, point_of_origin):
        """Sets the point_of_origin of this TileMatrix.

        Position in CRS coordinates of the corner of origin of this tile matrix. In previous version was `topLeftCorner` and `cornerOfOrigin` did not exist.  # noqa: E501

        :param point_of_origin: The point_of_origin of this TileMatrix.  # noqa: E501
        :type: list[float]
        """
        if point_of_origin is None:
            raise ValueError("Invalid value for `point_of_origin`, must not be `None`")  # noqa: E501

        self._point_of_origin = point_of_origin

    @property
    def tile_width(self):
        """Gets the tile_width of this TileMatrix.  # noqa: E501

        Width of each tile of this tile matrix in pixels  # noqa: E501

        :return: The tile_width of this TileMatrix.  # noqa: E501
        :rtype: float
        """
        return self._tile_width

    @tile_width.setter
    def tile_width(self, tile_width):
        """Sets the tile_width of this TileMatrix.

        Width of each tile of this tile matrix in pixels  # noqa: E501

        :param tile_width: The tile_width of this TileMatrix.  # noqa: E501
        :type: float
        """
        if tile_width is None:
            raise ValueError("Invalid value for `tile_width`, must not be `None`")  # noqa: E501
        if tile_width is not None and tile_width < 1:  # noqa: E501
            raise ValueError("Invalid value for `tile_width`, must be a value greater than or equal to `1`")  # noqa: E501

        self._tile_width = tile_width

    @property
    def tile_height(self):
        """Gets the tile_height of this TileMatrix.  # noqa: E501

        Height of each tile of this tile matrix in pixels  # noqa: E501

        :return: The tile_height of this TileMatrix.  # noqa: E501
        :rtype: float
        """
        return self._tile_height

    @tile_height.setter
    def tile_height(self, tile_height):
        """Sets the tile_height of this TileMatrix.

        Height of each tile of this tile matrix in pixels  # noqa: E501

        :param tile_height: The tile_height of this TileMatrix.  # noqa: E501
        :type: float
        """
        if tile_height is None:
            raise ValueError("Invalid value for `tile_height`, must not be `None`")  # noqa: E501
        if tile_height is not None and tile_height < 1:  # noqa: E501
            raise ValueError("Invalid value for `tile_height`, must be a value greater than or equal to `1`")  # noqa: E501

        self._tile_height = tile_height

    @property
    def matrix_height(self):
        """Gets the matrix_height of this TileMatrix.  # noqa: E501

        Width of the matrix (number of tiles in width)  # noqa: E501

        :return: The matrix_height of this TileMatrix.  # noqa: E501
        :rtype: float
        """
        return self._matrix_height

    @matrix_height.setter
    def matrix_height(self, matrix_height):
        """Sets the matrix_height of this TileMatrix.

        Width of the matrix (number of tiles in width)  # noqa: E501

        :param matrix_height: The matrix_height of this TileMatrix.  # noqa: E501
        :type: float
        """
        if matrix_height is None:
            raise ValueError("Invalid value for `matrix_height`, must not be `None`")  # noqa: E501
        if matrix_height is not None and matrix_height < 1:  # noqa: E501
            raise ValueError("Invalid value for `matrix_height`, must be a value greater than or equal to `1`")  # noqa: E501

        self._matrix_height = matrix_height

    @property
    def matrix_width(self):
        """Gets the matrix_width of this TileMatrix.  # noqa: E501

        Height of the matrix (number of tiles in height)  # noqa: E501

        :return: The matrix_width of this TileMatrix.  # noqa: E501
        :rtype: float
        """
        return self._matrix_width

    @matrix_width.setter
    def matrix_width(self, matrix_width):
        """Sets the matrix_width of this TileMatrix.

        Height of the matrix (number of tiles in height)  # noqa: E501

        :param matrix_width: The matrix_width of this TileMatrix.  # noqa: E501
        :type: float
        """
        if matrix_width is None:
            raise ValueError("Invalid value for `matrix_width`, must not be `None`")  # noqa: E501
        if matrix_width is not None and matrix_width < 1:  # noqa: E501
            raise ValueError("Invalid value for `matrix_width`, must be a value greater than or equal to `1`")  # noqa: E501

        self._matrix_width = matrix_width

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TileMatrix):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
