# coding: utf-8

"""
    Daraa

    This data store is offered by CubeWerx Inc. as a demonstration of its in-progress OGC API implementation.  # noqa: E501

    The version of the OpenAPI document: 9.3.45
    Contact: mgalluch@cubewerx.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CollectionsJson(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'links': 'list[LinkJson]',
        'time_stamp': 'datetime',
        'number_matched': 'int',
        'number_returned': 'int',
        'collections': 'list[CollectionInfoJson]'
    }

    attribute_map = {
        'links': 'links',
        'time_stamp': 'timeStamp',
        'number_matched': 'numberMatched',
        'number_returned': 'numberReturned',
        'collections': 'collections'
    }

    def __init__(self, links=None, time_stamp=None, number_matched=None, number_returned=None, collections=None):  # noqa: E501
        """CollectionsJson - a model defined in OpenAPI"""  # noqa: E501

        self._links = None
        self._time_stamp = None
        self._number_matched = None
        self._number_returned = None
        self._collections = None
        self.discriminator = None

        self.links = links
        if time_stamp is not None:
            self.time_stamp = time_stamp
        if number_matched is not None:
            self.number_matched = number_matched
        if number_returned is not None:
            self.number_returned = number_returned
        self.collections = collections

    @property
    def links(self):
        """Gets the links of this CollectionsJson.  # noqa: E501


        :return: The links of this CollectionsJson.  # noqa: E501
        :rtype: list[LinkJson]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this CollectionsJson.


        :param links: The links of this CollectionsJson.  # noqa: E501
        :type: list[LinkJson]
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")  # noqa: E501

        self._links = links

    @property
    def time_stamp(self):
        """Gets the time_stamp of this CollectionsJson.  # noqa: E501


        :return: The time_stamp of this CollectionsJson.  # noqa: E501
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this CollectionsJson.


        :param time_stamp: The time_stamp of this CollectionsJson.  # noqa: E501
        :type: datetime
        """

        self._time_stamp = time_stamp

    @property
    def number_matched(self):
        """Gets the number_matched of this CollectionsJson.  # noqa: E501


        :return: The number_matched of this CollectionsJson.  # noqa: E501
        :rtype: int
        """
        return self._number_matched

    @number_matched.setter
    def number_matched(self, number_matched):
        """Sets the number_matched of this CollectionsJson.


        :param number_matched: The number_matched of this CollectionsJson.  # noqa: E501
        :type: int
        """
        if number_matched is not None and number_matched < 0:  # noqa: E501
            raise ValueError("Invalid value for `number_matched`, must be a value greater than or equal to `0`")  # noqa: E501

        self._number_matched = number_matched

    @property
    def number_returned(self):
        """Gets the number_returned of this CollectionsJson.  # noqa: E501


        :return: The number_returned of this CollectionsJson.  # noqa: E501
        :rtype: int
        """
        return self._number_returned

    @number_returned.setter
    def number_returned(self, number_returned):
        """Sets the number_returned of this CollectionsJson.


        :param number_returned: The number_returned of this CollectionsJson.  # noqa: E501
        :type: int
        """
        if number_returned is not None and number_returned < 0:  # noqa: E501
            raise ValueError("Invalid value for `number_returned`, must be a value greater than or equal to `0`")  # noqa: E501

        self._number_returned = number_returned

    @property
    def collections(self):
        """Gets the collections of this CollectionsJson.  # noqa: E501


        :return: The collections of this CollectionsJson.  # noqa: E501
        :rtype: list[CollectionInfoJson]
        """
        return self._collections

    @collections.setter
    def collections(self, collections):
        """Sets the collections of this CollectionsJson.


        :param collections: The collections of this CollectionsJson.  # noqa: E501
        :type: list[CollectionInfoJson]
        """
        if collections is None:
            raise ValueError("Invalid value for `collections`, must not be `None`")  # noqa: E501

        self._collections = collections

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CollectionsJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
