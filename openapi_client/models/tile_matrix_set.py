# coding: utf-8

"""
    Daraa

    This data store is offered by CubeWerx Inc. as a demonstration of its in-progress OGC API implementation.  # noqa: E501

    The version of the OpenAPI document: 9.3.45
    Contact: mgalluch@cubewerx.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class TileMatrixSet(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'title': 'str',
        'abstract': 'str',
        'keywords': 'list[Keyword]',
        'identifier': 'str',
        'supported_crs': 'str',
        'well_known_scale_set': 'str',
        'tile_matrix': 'list[TileMatrix]'
    }

    attribute_map = {
        'title': 'title',
        'abstract': 'abstract',
        'keywords': 'keywords',
        'identifier': 'identifier',
        'supported_crs': 'supportedCRS',
        'well_known_scale_set': 'wellKnownScaleSet',
        'tile_matrix': 'tileMatrix'
    }

    def __init__(self, title=None, abstract=None, keywords=None, identifier=None, supported_crs=None, well_known_scale_set=None, tile_matrix=None):  # noqa: E501
        """TileMatrixSet - a model defined in OpenAPI"""  # noqa: E501

        self._title = None
        self._abstract = None
        self._keywords = None
        self._identifier = None
        self._supported_crs = None
        self._well_known_scale_set = None
        self._tile_matrix = None
        self.discriminator = None

        if title is not None:
            self.title = title
        if abstract is not None:
            self.abstract = abstract
        if keywords is not None:
            self.keywords = keywords
        self.identifier = identifier
        if supported_crs is not None:
            self.supported_crs = supported_crs
        if well_known_scale_set is not None:
            self.well_known_scale_set = well_known_scale_set
        if tile_matrix is not None:
            self.tile_matrix = tile_matrix

    @property
    def title(self):
        """Gets the title of this TileMatrixSet.  # noqa: E501

        Title of this tile matrix set, normally used for display to a human  # noqa: E501

        :return: The title of this TileMatrixSet.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this TileMatrixSet.

        Title of this tile matrix set, normally used for display to a human  # noqa: E501

        :param title: The title of this TileMatrixSet.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def abstract(self):
        """Gets the abstract of this TileMatrixSet.  # noqa: E501

        Brief narrative description of this tile matrix set, normally available for display to a human  # noqa: E501

        :return: The abstract of this TileMatrixSet.  # noqa: E501
        :rtype: str
        """
        return self._abstract

    @abstract.setter
    def abstract(self, abstract):
        """Sets the abstract of this TileMatrixSet.

        Brief narrative description of this tile matrix set, normally available for display to a human  # noqa: E501

        :param abstract: The abstract of this TileMatrixSet.  # noqa: E501
        :type: str
        """

        self._abstract = abstract

    @property
    def keywords(self):
        """Gets the keywords of this TileMatrixSet.  # noqa: E501

        Unordered list of one or more commonly used or formalized word(s) or phrase(s) used to describe this dataset  # noqa: E501

        :return: The keywords of this TileMatrixSet.  # noqa: E501
        :rtype: list[Keyword]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this TileMatrixSet.

        Unordered list of one or more commonly used or formalized word(s) or phrase(s) used to describe this dataset  # noqa: E501

        :param keywords: The keywords of this TileMatrixSet.  # noqa: E501
        :type: list[Keyword]
        """

        self._keywords = keywords

    @property
    def identifier(self):
        """Gets the identifier of this TileMatrixSet.  # noqa: E501

        Tile matrix set identifier,  # noqa: E501

        :return: The identifier of this TileMatrixSet.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this TileMatrixSet.

        Tile matrix set identifier,  # noqa: E501

        :param identifier: The identifier of this TileMatrixSet.  # noqa: E501
        :type: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501

        self._identifier = identifier

    @property
    def supported_crs(self):
        """Gets the supported_crs of this TileMatrixSet.  # noqa: E501

        Reference to one coordinate reference system (CRS)  # noqa: E501

        :return: The supported_crs of this TileMatrixSet.  # noqa: E501
        :rtype: str
        """
        return self._supported_crs

    @supported_crs.setter
    def supported_crs(self, supported_crs):
        """Sets the supported_crs of this TileMatrixSet.

        Reference to one coordinate reference system (CRS)  # noqa: E501

        :param supported_crs: The supported_crs of this TileMatrixSet.  # noqa: E501
        :type: str
        """

        self._supported_crs = supported_crs

    @property
    def well_known_scale_set(self):
        """Gets the well_known_scale_set of this TileMatrixSet.  # noqa: E501

        Reference to a well-known scale set  # noqa: E501

        :return: The well_known_scale_set of this TileMatrixSet.  # noqa: E501
        :rtype: str
        """
        return self._well_known_scale_set

    @well_known_scale_set.setter
    def well_known_scale_set(self, well_known_scale_set):
        """Sets the well_known_scale_set of this TileMatrixSet.

        Reference to a well-known scale set  # noqa: E501

        :param well_known_scale_set: The well_known_scale_set of this TileMatrixSet.  # noqa: E501
        :type: str
        """

        self._well_known_scale_set = well_known_scale_set

    @property
    def tile_matrix(self):
        """Gets the tile_matrix of this TileMatrixSet.  # noqa: E501

        Describes a scale level and its tile matrix  # noqa: E501

        :return: The tile_matrix of this TileMatrixSet.  # noqa: E501
        :rtype: list[TileMatrix]
        """
        return self._tile_matrix

    @tile_matrix.setter
    def tile_matrix(self, tile_matrix):
        """Sets the tile_matrix of this TileMatrixSet.

        Describes a scale level and its tile matrix  # noqa: E501

        :param tile_matrix: The tile_matrix of this TileMatrixSet.  # noqa: E501
        :type: list[TileMatrix]
        """

        self._tile_matrix = tile_matrix

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TileMatrixSet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
