# coding: utf-8

"""
    Daraa

    This data store is offered by CubeWerx Inc. as a demonstration of its in-progress OGC API implementation.  # noqa: E501

    The version of the OpenAPI document: 9.3.45
    Contact: mgalluch@cubewerx.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (
    ApiTypeError,
    ApiValueError
)


class VectorFeaturesAndCatalogueRecordsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_feature(self, collection_id, feature_id, **kwargs):  # noqa: E501
        """This operation retreives the specified feature from the specified collection  # noqa: E501

        GetItem operation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_feature(collection_id, feature_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_id: Name of a feature collection offered by the service (required)
        :param str feature_id: Locate identifier for a specific feature (required)
        :param str f: A MIME type indicating the representation of the resources to be presented (e.g. application/gml+xml; version=3.2 for GML 3.2).
        :param str result_type: The possible values for this parameter are \"results\" and \"hits\". If the value of the resultType parameter is set to \"results\" the server shall generate a complete response document containing resources that satisfy the operation. The root element of the response container shall include a count of the number of resources actually presented in the response document. The root element of the response container shall also include a count of the total number of resources that the operations actually found which will always be equal to or greater than the number of resource presented in the response document. If the value of the resultType attribute is set to \"hits\" the server shall generate an empty response document containing no resource instances and the root element of the response container shall contain the count of the total number of resources that the operation found. The value for the number of resources presented in the response document shall be set to zero.
        :param str property_name: A list of feature properties to include in the response.  For some output formats, such as XML that can be validate against a formal schema, this list represents the optional properties to include in the response.
        :param int coord_precision: Number of digits after the decimal point to use when presenting result in a text-base output format such as XML or JSON
        :param str css: A reference to a CSS to be applied to HTML-based output formats; ignored otherwise
        :param str xslt: A reference to a XSLT to be applied to XML-based output formats; ignored otherwise
        :param str kml_style_url: A reference to a KML style shere to be applied to KML-based output formats; ignored otherwise
        :param float resolution: Specifies the resolution of a display port in the event that the WFS output is intended for display; the server attempts to simplify each output geometry by removing unnecessary verticies and this triming the size of the response.
        :param str response_handler: Tiggers asynchronous processing of the request; notification is sent to the endpoint specified as the value of the parameter.
        :param str crs: Asserts the CRS to use for encoding features in the response document.
        :param bool pretty: Whether or not the output should be pretty-formatted (with whitespace, etc.).
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_feature_with_http_info(collection_id, feature_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_feature_with_http_info(collection_id, feature_id, **kwargs)  # noqa: E501
            return data

    def get_feature_with_http_info(self, collection_id, feature_id, **kwargs):  # noqa: E501
        """This operation retreives the specified feature from the specified collection  # noqa: E501

        GetItem operation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_feature_with_http_info(collection_id, feature_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_id: Name of a feature collection offered by the service (required)
        :param str feature_id: Locate identifier for a specific feature (required)
        :param str f: A MIME type indicating the representation of the resources to be presented (e.g. application/gml+xml; version=3.2 for GML 3.2).
        :param str result_type: The possible values for this parameter are \"results\" and \"hits\". If the value of the resultType parameter is set to \"results\" the server shall generate a complete response document containing resources that satisfy the operation. The root element of the response container shall include a count of the number of resources actually presented in the response document. The root element of the response container shall also include a count of the total number of resources that the operations actually found which will always be equal to or greater than the number of resource presented in the response document. If the value of the resultType attribute is set to \"hits\" the server shall generate an empty response document containing no resource instances and the root element of the response container shall contain the count of the total number of resources that the operation found. The value for the number of resources presented in the response document shall be set to zero.
        :param str property_name: A list of feature properties to include in the response.  For some output formats, such as XML that can be validate against a formal schema, this list represents the optional properties to include in the response.
        :param int coord_precision: Number of digits after the decimal point to use when presenting result in a text-base output format such as XML or JSON
        :param str css: A reference to a CSS to be applied to HTML-based output formats; ignored otherwise
        :param str xslt: A reference to a XSLT to be applied to XML-based output formats; ignored otherwise
        :param str kml_style_url: A reference to a KML style shere to be applied to KML-based output formats; ignored otherwise
        :param float resolution: Specifies the resolution of a display port in the event that the WFS output is intended for display; the server attempts to simplify each output geometry by removing unnecessary verticies and this triming the size of the response.
        :param str response_handler: Tiggers asynchronous processing of the request; notification is sent to the endpoint specified as the value of the parameter.
        :param str crs: Asserts the CRS to use for encoding features in the response document.
        :param bool pretty: Whether or not the output should be pretty-formatted (with whitespace, etc.).
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['collection_id', 'feature_id', 'f', 'result_type', 'property_name', 'coord_precision', 'css', 'xslt', 'kml_style_url', 'resolution', 'response_handler', 'crs', 'pretty']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_feature" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in local_var_params or
                local_var_params['collection_id'] is None):
            raise ApiValueError("Missing the required parameter `collection_id` when calling `get_feature`")  # noqa: E501
        # verify the required parameter 'feature_id' is set
        if ('feature_id' not in local_var_params or
                local_var_params['feature_id'] is None):
            raise ApiValueError("Missing the required parameter `feature_id` when calling `get_feature`")  # noqa: E501

        if 'coord_precision' in local_var_params and local_var_params['coord_precision'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `coord_precision` when calling `get_feature`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'collection_id' in local_var_params:
            path_params['collectionId'] = local_var_params['collection_id']  # noqa: E501
        if 'feature_id' in local_var_params:
            path_params['featureId'] = local_var_params['feature_id']  # noqa: E501

        query_params = []
        if 'f' in local_var_params:
            query_params.append(('f', local_var_params['f']))  # noqa: E501
        if 'result_type' in local_var_params:
            query_params.append(('resultType', local_var_params['result_type']))  # noqa: E501
        if 'property_name' in local_var_params:
            query_params.append(('propertyName', local_var_params['property_name']))  # noqa: E501
        if 'coord_precision' in local_var_params:
            query_params.append(('coordPrecision', local_var_params['coord_precision']))  # noqa: E501
        if 'css' in local_var_params:
            query_params.append(('css', local_var_params['css']))  # noqa: E501
        if 'xslt' in local_var_params:
            query_params.append(('xslt', local_var_params['xslt']))  # noqa: E501
        if 'kml_style_url' in local_var_params:
            query_params.append(('kmlStyleURL', local_var_params['kml_style_url']))  # noqa: E501
        if 'resolution' in local_var_params:
            query_params.append(('resolution', local_var_params['resolution']))  # noqa: E501
        if 'response_handler' in local_var_params:
            query_params.append(('responseHandler', local_var_params['response_handler']))  # noqa: E501
        if 'crs' in local_var_params:
            query_params.append(('crs', local_var_params['crs']))  # noqa: E501
        if 'pretty' in local_var_params:
            query_params.append(('pretty', local_var_params['pretty']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/xml', 'text/html', 'application/json', 'application/geo+json', 'application/gml+xml', 'application/x-bxfs+xml', 'application/rss+xml', 'application/atom+xml', 'application/vnd.google-earth.kml+xml', 'application/vnd.google-earth.kmz', 'application/vnd.shp+octet-stream', 'application/problem+json', ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cwApiKeyHeader', 'cwApiKeyQuery', 'cwAuth', 'httpBearer', 'oauth2', 'openIdConnect', 'openIdConnect1']  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collectionId}/items/{featureId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_features(self, collection_id, **kwargs):  # noqa: E501
        """This operation retreives features from the specified collection  # noqa: E501

        GetItems operation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_features(collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_id: Name of a feature collection offered by the service (required)
        :param str f: A MIME type indicating the representation of the resources to be presented (e.g. application/gml+xml; version=3.2 for GML 3.2).
        :param int limit: The optional limit parameter limits the number of items that are presented in the response document.  Only items are counted that are on the first level of the collection in the response document. Nested objects contained within the explicitly requested items shall not be counted.
        :param list[float] bbox: Only features that have a geometry that intersects the bounding box are selected. The bounding box is provided as four or six numbers, depending on whether the coordinate reference system includes a vertical axis (elevation or depth): * Lower left corner, coordinate axis 1 * Lower left corner, coordinate axis 2 * Lower left corner, coordinate axis 3 (optional) * Upper right corner, coordinate axis 1 * Upper right corner, coordinate axis 2 * Upper right corner, coordinate axis 3 (optional) The coordinate reference system of the values is WGS84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate reference system is specified in the parameter `bbox-crs`. For WGS84 longitude/latitude the values are in most cases the sequence of minimum longitude, minimum latitude, maximum longitude and maximum latitude. However, in cases where the box spans the antimeridian the first value (west-most box edge) is larger than the third value (east-most box edge). If a feature has multiple spatial geometry properties, it is the decision of the server whether only a single spatial geometry property is used to determine the extent or all relevant geometries.
        :param datetime datetime: Temporal constraint to be applied to a query; may be a time instance or a temporal period as per ISO8601.
        :param str t_relation: Temporal operator to use for temporal contstraint
        :param str result_type: The possible values for this parameter are \"results\" and \"hits\". If the value of the resultType parameter is set to \"results\" the server shall generate a complete response document containing resources that satisfy the operation. The root element of the response container shall include a count of the number of resources actually presented in the response document. The root element of the response container shall also include a count of the total number of resources that the operations actually found which will always be equal to or greater than the number of resource presented in the response document. If the value of the resultType attribute is set to \"hits\" the server shall generate an empty response document containing no resource instances and the root element of the response container shall contain the count of the total number of resources that the operation found. The value for the number of resources presented in the response document shall be set to zero.
        :param str property_name: A list of feature properties to include in the response.  For some output formats, such as XML that can be validate against a formal schema, this list represents the optional properties to include in the response.
        :param int coord_precision: Number of digits after the decimal point to use when presenting result in a text-base output format such as XML or JSON
        :param str css: A reference to a CSS to be applied to HTML-based output formats; ignored otherwise
        :param str xslt: A reference to a XSLT to be applied to XML-based output formats; ignored otherwise
        :param str kml_style_url: A reference to a KML style shere to be applied to KML-based output formats; ignored otherwise
        :param int max_bytes: The maximum number of bytes to be presented in one page of a query response.
        :param float resolution: Specifies the resolution of a display port in the event that the WFS output is intended for display; the server attempts to simplify each output geometry by removing unnecessary verticies and this triming the size of the response.
        :param str response_handler: Tiggers asynchronous processing of the request; notification is sent to the endpoint specified as the value of the parameter.
        :param str crs: Asserts the CRS to use for encoding features in the response document.
        :param str filter: A query filter specified is some predicate encoding language supported by the server
        :param str filter_language: An identifier indicating the predicate language used to express the value of the \"filter\" parameter
        :param str q: A space seperated list of search terms to be applied to text fields in a feature.
        :param str geometry: The geometry of an area of interest specified using WKT.
        :param str geometry_crs: The CRS used to encode the coordinates of the \"geometry\" parameter.
        :param str relation: The spatial operator to apply when testing a feature's geometry against the area of interest encoded using the \"geometry\" parameter.
        :param float lat: The latitude of the center point of a proximity search.
        :param float lon: The longitude of the center point of a proximity search.
        :param float radius: The search radius in meters of a proximity search.
        :param bool pretty: Whether or not the output should be pretty-formatted (with whitespace, etc.).
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_features_with_http_info(collection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_features_with_http_info(collection_id, **kwargs)  # noqa: E501
            return data

    def get_features_with_http_info(self, collection_id, **kwargs):  # noqa: E501
        """This operation retreives features from the specified collection  # noqa: E501

        GetItems operation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_features_with_http_info(collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_id: Name of a feature collection offered by the service (required)
        :param str f: A MIME type indicating the representation of the resources to be presented (e.g. application/gml+xml; version=3.2 for GML 3.2).
        :param int limit: The optional limit parameter limits the number of items that are presented in the response document.  Only items are counted that are on the first level of the collection in the response document. Nested objects contained within the explicitly requested items shall not be counted.
        :param list[float] bbox: Only features that have a geometry that intersects the bounding box are selected. The bounding box is provided as four or six numbers, depending on whether the coordinate reference system includes a vertical axis (elevation or depth): * Lower left corner, coordinate axis 1 * Lower left corner, coordinate axis 2 * Lower left corner, coordinate axis 3 (optional) * Upper right corner, coordinate axis 1 * Upper right corner, coordinate axis 2 * Upper right corner, coordinate axis 3 (optional) The coordinate reference system of the values is WGS84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate reference system is specified in the parameter `bbox-crs`. For WGS84 longitude/latitude the values are in most cases the sequence of minimum longitude, minimum latitude, maximum longitude and maximum latitude. However, in cases where the box spans the antimeridian the first value (west-most box edge) is larger than the third value (east-most box edge). If a feature has multiple spatial geometry properties, it is the decision of the server whether only a single spatial geometry property is used to determine the extent or all relevant geometries.
        :param datetime datetime: Temporal constraint to be applied to a query; may be a time instance or a temporal period as per ISO8601.
        :param str t_relation: Temporal operator to use for temporal contstraint
        :param str result_type: The possible values for this parameter are \"results\" and \"hits\". If the value of the resultType parameter is set to \"results\" the server shall generate a complete response document containing resources that satisfy the operation. The root element of the response container shall include a count of the number of resources actually presented in the response document. The root element of the response container shall also include a count of the total number of resources that the operations actually found which will always be equal to or greater than the number of resource presented in the response document. If the value of the resultType attribute is set to \"hits\" the server shall generate an empty response document containing no resource instances and the root element of the response container shall contain the count of the total number of resources that the operation found. The value for the number of resources presented in the response document shall be set to zero.
        :param str property_name: A list of feature properties to include in the response.  For some output formats, such as XML that can be validate against a formal schema, this list represents the optional properties to include in the response.
        :param int coord_precision: Number of digits after the decimal point to use when presenting result in a text-base output format such as XML or JSON
        :param str css: A reference to a CSS to be applied to HTML-based output formats; ignored otherwise
        :param str xslt: A reference to a XSLT to be applied to XML-based output formats; ignored otherwise
        :param str kml_style_url: A reference to a KML style shere to be applied to KML-based output formats; ignored otherwise
        :param int max_bytes: The maximum number of bytes to be presented in one page of a query response.
        :param float resolution: Specifies the resolution of a display port in the event that the WFS output is intended for display; the server attempts to simplify each output geometry by removing unnecessary verticies and this triming the size of the response.
        :param str response_handler: Tiggers asynchronous processing of the request; notification is sent to the endpoint specified as the value of the parameter.
        :param str crs: Asserts the CRS to use for encoding features in the response document.
        :param str filter: A query filter specified is some predicate encoding language supported by the server
        :param str filter_language: An identifier indicating the predicate language used to express the value of the \"filter\" parameter
        :param str q: A space seperated list of search terms to be applied to text fields in a feature.
        :param str geometry: The geometry of an area of interest specified using WKT.
        :param str geometry_crs: The CRS used to encode the coordinates of the \"geometry\" parameter.
        :param str relation: The spatial operator to apply when testing a feature's geometry against the area of interest encoded using the \"geometry\" parameter.
        :param float lat: The latitude of the center point of a proximity search.
        :param float lon: The longitude of the center point of a proximity search.
        :param float radius: The search radius in meters of a proximity search.
        :param bool pretty: Whether or not the output should be pretty-formatted (with whitespace, etc.).
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['collection_id', 'f', 'limit', 'bbox', 'datetime', 't_relation', 'result_type', 'property_name', 'coord_precision', 'css', 'xslt', 'kml_style_url', 'max_bytes', 'resolution', 'response_handler', 'crs', 'filter', 'filter_language', 'q', 'geometry', 'geometry_crs', 'relation', 'lat', 'lon', 'radius', 'pretty']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_features" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in local_var_params or
                local_var_params['collection_id'] is None):
            raise ApiValueError("Missing the required parameter `collection_id` when calling `get_features`")  # noqa: E501

        if 'limit' in local_var_params and local_var_params['limit'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `get_features`, must be a value greater than or equal to `0`")  # noqa: E501
        if ('bbox' in local_var_params and
                len(local_var_params['bbox']) > 4):
            raise ApiValueError("Invalid value for parameter `bbox` when calling `get_features`, number of items must be less than or equal to `4`")  # noqa: E501
        if ('bbox' in local_var_params and
                len(local_var_params['bbox']) < 4):
            raise ApiValueError("Invalid value for parameter `bbox` when calling `get_features`, number of items must be greater than or equal to `4`")  # noqa: E501
        if 'coord_precision' in local_var_params and local_var_params['coord_precision'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `coord_precision` when calling `get_features`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'collection_id' in local_var_params:
            path_params['collectionId'] = local_var_params['collection_id']  # noqa: E501

        query_params = []
        if 'f' in local_var_params:
            query_params.append(('f', local_var_params['f']))  # noqa: E501
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'bbox' in local_var_params:
            query_params.append(('bbox', local_var_params['bbox']))  # noqa: E501
            collection_formats['bbox'] = 'csv'  # noqa: E501
        if 'datetime' in local_var_params:
            query_params.append(('datetime', local_var_params['datetime']))  # noqa: E501
        if 't_relation' in local_var_params:
            query_params.append(('tRelation', local_var_params['t_relation']))  # noqa: E501
        if 'result_type' in local_var_params:
            query_params.append(('resultType', local_var_params['result_type']))  # noqa: E501
        if 'property_name' in local_var_params:
            query_params.append(('propertyName', local_var_params['property_name']))  # noqa: E501
        if 'coord_precision' in local_var_params:
            query_params.append(('coordPrecision', local_var_params['coord_precision']))  # noqa: E501
        if 'css' in local_var_params:
            query_params.append(('css', local_var_params['css']))  # noqa: E501
        if 'xslt' in local_var_params:
            query_params.append(('xslt', local_var_params['xslt']))  # noqa: E501
        if 'kml_style_url' in local_var_params:
            query_params.append(('kmlStyleURL', local_var_params['kml_style_url']))  # noqa: E501
        if 'max_bytes' in local_var_params:
            query_params.append(('maxBytes', local_var_params['max_bytes']))  # noqa: E501
        if 'resolution' in local_var_params:
            query_params.append(('resolution', local_var_params['resolution']))  # noqa: E501
        if 'response_handler' in local_var_params:
            query_params.append(('responseHandler', local_var_params['response_handler']))  # noqa: E501
        if 'crs' in local_var_params:
            query_params.append(('crs', local_var_params['crs']))  # noqa: E501
        if 'filter' in local_var_params:
            query_params.append(('filter', local_var_params['filter']))  # noqa: E501
        if 'filter_language' in local_var_params:
            query_params.append(('filter_language', local_var_params['filter_language']))  # noqa: E501
        if 'q' in local_var_params:
            query_params.append(('q', local_var_params['q']))  # noqa: E501
        if 'geometry' in local_var_params:
            query_params.append(('geometry', local_var_params['geometry']))  # noqa: E501
        if 'geometry_crs' in local_var_params:
            query_params.append(('geometry_crs', local_var_params['geometry_crs']))  # noqa: E501
        if 'relation' in local_var_params:
            query_params.append(('relation', local_var_params['relation']))  # noqa: E501
        if 'lat' in local_var_params:
            query_params.append(('lat', local_var_params['lat']))  # noqa: E501
        if 'lon' in local_var_params:
            query_params.append(('lon', local_var_params['lon']))  # noqa: E501
        if 'radius' in local_var_params:
            query_params.append(('radius', local_var_params['radius']))  # noqa: E501
        if 'pretty' in local_var_params:
            query_params.append(('pretty', local_var_params['pretty']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/xml', 'text/html', 'application/json', 'application/geo+json', 'application/gml+xml', 'application/x-bxfs+xml', 'application/rss+xml', 'application/atom+xml', 'application/vnd.google-earth.kml+xml', 'application/vnd.google-earth.kmz', 'application/vnd.shp+octet-stream', 'application/problem+json', ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cwApiKeyHeader', 'cwApiKeyQuery', 'cwAuth', 'httpBearer', 'oauth2', 'openIdConnect', 'openIdConnect1']  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collectionId}/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
