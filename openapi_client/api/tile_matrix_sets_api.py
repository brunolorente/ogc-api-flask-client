# coding: utf-8

"""
    Daraa

    This data store is offered by CubeWerx Inc. as a demonstration of its in-progress OGC API implementation.  # noqa: E501

    The version of the OpenAPI document: 9.3.45
    Contact: mgalluch@cubewerx.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (
    ApiTypeError,
    ApiValueError
)


class TileMatrixSetsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def tile_matrix_sets_get(self, **kwargs):  # noqa: E501
        """The tile-matrix sets available in this data store.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tile_matrix_sets_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str f: A token indicating the content type to return.  Overrides the HTTP \"Accept\" header if present.
        :param bool pretty: Whether or not the output should be pretty-formatted (with whitespace, etc.).
        :return: TileMatrixSets
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tile_matrix_sets_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.tile_matrix_sets_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def tile_matrix_sets_get_with_http_info(self, **kwargs):  # noqa: E501
        """The tile-matrix sets available in this data store.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tile_matrix_sets_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str f: A token indicating the content type to return.  Overrides the HTTP \"Accept\" header if present.
        :param bool pretty: Whether or not the output should be pretty-formatted (with whitespace, etc.).
        :return: TileMatrixSets
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['f', 'pretty']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tile_matrix_sets_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'f' in local_var_params:
            query_params.append(('f', local_var_params['f']))  # noqa: E501
        if 'pretty' in local_var_params:
            query_params.append(('pretty', local_var_params['pretty']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/html', 'application/problem+json', 'text/xml', ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cwApiKeyHeader', 'cwApiKeyQuery', 'cwAuth', 'httpBearer', 'oauth2', 'openIdConnect', 'openIdConnect1']  # noqa: E501

        return self.api_client.call_api(
            '/tileMatrixSets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TileMatrixSets',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tile_matrix_sets_tile_matrix_set_id_get(self, tile_matrix_set_id, **kwargs):  # noqa: E501
        """A tile-matrix set in this data store.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tile_matrix_sets_tile_matrix_set_id_get(tile_matrix_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tile_matrix_set_id: The identifier of a tile-matrix set in this data store. (required)
        :param str f: A token indicating the content type to return.  Overrides the HTTP \"Accept\" header if present.
        :param bool pretty: Whether or not the output should be pretty-formatted (with whitespace, etc.).
        :return: TileMatrixSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tile_matrix_sets_tile_matrix_set_id_get_with_http_info(tile_matrix_set_id, **kwargs)  # noqa: E501
        else:
            (data) = self.tile_matrix_sets_tile_matrix_set_id_get_with_http_info(tile_matrix_set_id, **kwargs)  # noqa: E501
            return data

    def tile_matrix_sets_tile_matrix_set_id_get_with_http_info(self, tile_matrix_set_id, **kwargs):  # noqa: E501
        """A tile-matrix set in this data store.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tile_matrix_sets_tile_matrix_set_id_get_with_http_info(tile_matrix_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tile_matrix_set_id: The identifier of a tile-matrix set in this data store. (required)
        :param str f: A token indicating the content type to return.  Overrides the HTTP \"Accept\" header if present.
        :param bool pretty: Whether or not the output should be pretty-formatted (with whitespace, etc.).
        :return: TileMatrixSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['tile_matrix_set_id', 'f', 'pretty']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tile_matrix_sets_tile_matrix_set_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'tile_matrix_set_id' is set
        if ('tile_matrix_set_id' not in local_var_params or
                local_var_params['tile_matrix_set_id'] is None):
            raise ApiValueError("Missing the required parameter `tile_matrix_set_id` when calling `tile_matrix_sets_tile_matrix_set_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tile_matrix_set_id' in local_var_params:
            path_params['tileMatrixSetId'] = local_var_params['tile_matrix_set_id']  # noqa: E501

        query_params = []
        if 'f' in local_var_params:
            query_params.append(('f', local_var_params['f']))  # noqa: E501
        if 'pretty' in local_var_params:
            query_params.append(('pretty', local_var_params['pretty']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/html', 'application/problem+json', 'text/xml', ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cwApiKeyHeader', 'cwApiKeyQuery', 'cwAuth', 'httpBearer', 'oauth2', 'openIdConnect', 'openIdConnect1']  # noqa: E501

        return self.api_client.call_api(
            '/tileMatrixSets/{tileMatrixSetId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TileMatrixSet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
