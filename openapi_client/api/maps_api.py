# coding: utf-8

"""
    Daraa

    This data store is offered by CubeWerx Inc. as a demonstration of its in-progress OGC API implementation.  # noqa: E501

    The version of the OpenAPI document: 9.3.45
    Contact: mgalluch@cubewerx.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (
    ApiTypeError,
    ApiValueError
)


class MapsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def collections_collection_id_map_get(self, collection_id, **kwargs):  # noqa: E501
        """A map layer of the specified collection.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_id_map_get(collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_id: The identifier of a collection in this data store. (required)
        :param str style_id: The identifier of a style in this data store that's compatible with the specified collection.  If no styleId parameter is present, the default style of the collection will be rendered.
        :param str crs: The coordinate reference system of the map.  If present, the bbox parameter must also be present.  If not present, the extent and native coordinate reference system of the thing being mapped will be used.
        :param list[float] bbox: The spatial extent of the map in crs units.  Syntax: \"minx,miny,maxx,maxy\".  If present, the crs parameter must also be present.  If not present, the extent and native coordinate reference system of the thing being mapped will be used.
        :param int width: The width (in pixels) of the map.  If unspecified, a reasonable default will be used.
        :param int height: The height (in pixels) of the map.  If unspecified, a reasonable default will be used.
        :param bool transparent: Whether or not the background of the image should be transparent (when supported by the requested image format).
        :param str bgcolor: Hexadecimal red-green-blue color value for the background color.  If not specified, the background color specified by the style (0xFFFFFF by default) will be used.
        :param float pixel_size: The physical linear size of a display pixel in millimetres.  If the display device has non-square pixels, then sqrt(width * height) should be provided.  The pixel units and scale rules in a style definition are with respect to a standardized rendering pixel size of 0.28mm.  Knowledge of the actual pixel size of the display device will allow the renderer to produce a map with the intended look even if the actual pixel size is significantly different from the standardized rendering pixel size.
        :param str datetime: Either a date-time or an interval, open or closed. Date and time expressions adhere to RFC 3339.  Open intervals are expressed using double-dots.  Examples:  * A date-time: \"2018-02-12T23:20:50Z\" * A closed interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\" * Open intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"  Only elements that have a temporal property that intersects the value of `datetime` are selected.
        :param str f: A token indicating the content type to return.  Overrides the HTTP \"Accept\" header if present.  A value of \"jop\" (content type \"image/x-jpegorpng\") indicates that either JPEG or PNG should be returned, whichever the server deems to be most appropriate for this particular image.  A value of \"wkb\" indicates CubeWerx's raster extension to the Well-Known-Binary format.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_id_map_get_with_http_info(collection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_id_map_get_with_http_info(collection_id, **kwargs)  # noqa: E501
            return data

    def collections_collection_id_map_get_with_http_info(self, collection_id, **kwargs):  # noqa: E501
        """A map layer of the specified collection.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_id_map_get_with_http_info(collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_id: The identifier of a collection in this data store. (required)
        :param str style_id: The identifier of a style in this data store that's compatible with the specified collection.  If no styleId parameter is present, the default style of the collection will be rendered.
        :param str crs: The coordinate reference system of the map.  If present, the bbox parameter must also be present.  If not present, the extent and native coordinate reference system of the thing being mapped will be used.
        :param list[float] bbox: The spatial extent of the map in crs units.  Syntax: \"minx,miny,maxx,maxy\".  If present, the crs parameter must also be present.  If not present, the extent and native coordinate reference system of the thing being mapped will be used.
        :param int width: The width (in pixels) of the map.  If unspecified, a reasonable default will be used.
        :param int height: The height (in pixels) of the map.  If unspecified, a reasonable default will be used.
        :param bool transparent: Whether or not the background of the image should be transparent (when supported by the requested image format).
        :param str bgcolor: Hexadecimal red-green-blue color value for the background color.  If not specified, the background color specified by the style (0xFFFFFF by default) will be used.
        :param float pixel_size: The physical linear size of a display pixel in millimetres.  If the display device has non-square pixels, then sqrt(width * height) should be provided.  The pixel units and scale rules in a style definition are with respect to a standardized rendering pixel size of 0.28mm.  Knowledge of the actual pixel size of the display device will allow the renderer to produce a map with the intended look even if the actual pixel size is significantly different from the standardized rendering pixel size.
        :param str datetime: Either a date-time or an interval, open or closed. Date and time expressions adhere to RFC 3339.  Open intervals are expressed using double-dots.  Examples:  * A date-time: \"2018-02-12T23:20:50Z\" * A closed interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\" * Open intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"  Only elements that have a temporal property that intersects the value of `datetime` are selected.
        :param str f: A token indicating the content type to return.  Overrides the HTTP \"Accept\" header if present.  A value of \"jop\" (content type \"image/x-jpegorpng\") indicates that either JPEG or PNG should be returned, whichever the server deems to be most appropriate for this particular image.  A value of \"wkb\" indicates CubeWerx's raster extension to the Well-Known-Binary format.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['collection_id', 'style_id', 'crs', 'bbox', 'width', 'height', 'transparent', 'bgcolor', 'pixel_size', 'datetime', 'f']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_id_map_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in local_var_params or
                local_var_params['collection_id'] is None):
            raise ApiValueError("Missing the required parameter `collection_id` when calling `collections_collection_id_map_get`")  # noqa: E501

        if ('bbox' in local_var_params and
                len(local_var_params['bbox']) > 4):
            raise ApiValueError("Invalid value for parameter `bbox` when calling `collections_collection_id_map_get`, number of items must be less than or equal to `4`")  # noqa: E501
        if ('bbox' in local_var_params and
                len(local_var_params['bbox']) < 4):
            raise ApiValueError("Invalid value for parameter `bbox` when calling `collections_collection_id_map_get`, number of items must be greater than or equal to `4`")  # noqa: E501
        if 'width' in local_var_params and local_var_params['width'] > 8000:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `width` when calling `collections_collection_id_map_get`, must be a value less than or equal to `8000`")  # noqa: E501
        if 'width' in local_var_params and local_var_params['width'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `width` when calling `collections_collection_id_map_get`, must be a value greater than or equal to `1`")  # noqa: E501
        if 'height' in local_var_params and local_var_params['height'] > 6000:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `height` when calling `collections_collection_id_map_get`, must be a value less than or equal to `6000`")  # noqa: E501
        if 'height' in local_var_params and local_var_params['height'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `height` when calling `collections_collection_id_map_get`, must be a value greater than or equal to `1`")  # noqa: E501
        if 'pixel_size' in local_var_params and local_var_params['pixel_size'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `pixel_size` when calling `collections_collection_id_map_get`, must be a value greater than `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'collection_id' in local_var_params:
            path_params['collectionId'] = local_var_params['collection_id']  # noqa: E501

        query_params = []
        if 'style_id' in local_var_params:
            query_params.append(('styleId', local_var_params['style_id']))  # noqa: E501
        if 'crs' in local_var_params:
            query_params.append(('crs', local_var_params['crs']))  # noqa: E501
        if 'bbox' in local_var_params:
            query_params.append(('bbox', local_var_params['bbox']))  # noqa: E501
            collection_formats['bbox'] = 'csv'  # noqa: E501
        if 'width' in local_var_params:
            query_params.append(('width', local_var_params['width']))  # noqa: E501
        if 'height' in local_var_params:
            query_params.append(('height', local_var_params['height']))  # noqa: E501
        if 'transparent' in local_var_params:
            query_params.append(('transparent', local_var_params['transparent']))  # noqa: E501
        if 'bgcolor' in local_var_params:
            query_params.append(('bgcolor', local_var_params['bgcolor']))  # noqa: E501
        if 'pixel_size' in local_var_params:
            query_params.append(('pixelSize', local_var_params['pixel_size']))  # noqa: E501
        if 'datetime' in local_var_params:
            query_params.append(('datetime', local_var_params['datetime']))  # noqa: E501
        if 'f' in local_var_params:
            query_params.append(('f', local_var_params['f']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/x-jpegorpng', 'image/jpeg', 'image/png', 'image/tiff', 'image/gif', 'application/x-cubewerx-wkb', 'application/problem+json', 'text/xml', 'text/html', 'application/json', ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cwApiKeyHeader', 'cwApiKeyQuery', 'cwAuth', 'httpBearer', 'oauth2', 'openIdConnect', 'openIdConnect1']  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collectionId}/map', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_id_map_legend_get(self, collection_id, **kwargs):  # noqa: E501
        """A legend image showing a graphical representation of the specified collection as it would appear in the corresponding map.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_id_map_legend_get(collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_id: The identifier of a collection in this data store. (required)
        :param str style_id: The identifier of a style in this data store that's compatible with the specified collection.  If no styleId parameter is present, the default style of the collection will be rendered.
        :param bool transparent: Whether or not the background of the image should be transparent (when supported by the requested image format).
        :param str bgcolor: Hexadecimal red-green-blue color value for the background color.  If not specified, the background color specified by the style (0xFFFFFF by default) will be used.
        :param str textcolor: Hexadecimal red-green-blue color value for the text color.  If not specified, a color that contrasts the background color will be used.
        :param float scale: If specified, a legend graphic specific to this scale (expressed as a scale denominator) will be returned.  Otherwise, a possibly-composite image providing a legend graphic for each of the scale ranges defined by the style will be returned.
        :param float pixel_size: The physical linear size of a display pixel in millimetres.  If the display device has non-square pixels, then sqrt(width * height) should be provided.  The pixel units and scale rules in a style definition are with respect to a standardized rendering pixel size of 0.28mm.  Knowledge of the actual pixel size of the display device will allow the renderer to produce a map with the intended look even if the actual pixel size is significantly different from the standardized rendering pixel size.
        :param str f: A token indicating the content type to return.  Overrides the HTTP \"Accept\" header if present.  A value of \"jop\" (content type \"image/x-jpegorpng\") indicates that either JPEG or PNG should be returned, whichever the server deems to be most appropriate for this particular image.  A value of \"wkb\" indicates CubeWerx's raster extension to the Well-Known-Binary format.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_id_map_legend_get_with_http_info(collection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_id_map_legend_get_with_http_info(collection_id, **kwargs)  # noqa: E501
            return data

    def collections_collection_id_map_legend_get_with_http_info(self, collection_id, **kwargs):  # noqa: E501
        """A legend image showing a graphical representation of the specified collection as it would appear in the corresponding map.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_id_map_legend_get_with_http_info(collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_id: The identifier of a collection in this data store. (required)
        :param str style_id: The identifier of a style in this data store that's compatible with the specified collection.  If no styleId parameter is present, the default style of the collection will be rendered.
        :param bool transparent: Whether or not the background of the image should be transparent (when supported by the requested image format).
        :param str bgcolor: Hexadecimal red-green-blue color value for the background color.  If not specified, the background color specified by the style (0xFFFFFF by default) will be used.
        :param str textcolor: Hexadecimal red-green-blue color value for the text color.  If not specified, a color that contrasts the background color will be used.
        :param float scale: If specified, a legend graphic specific to this scale (expressed as a scale denominator) will be returned.  Otherwise, a possibly-composite image providing a legend graphic for each of the scale ranges defined by the style will be returned.
        :param float pixel_size: The physical linear size of a display pixel in millimetres.  If the display device has non-square pixels, then sqrt(width * height) should be provided.  The pixel units and scale rules in a style definition are with respect to a standardized rendering pixel size of 0.28mm.  Knowledge of the actual pixel size of the display device will allow the renderer to produce a map with the intended look even if the actual pixel size is significantly different from the standardized rendering pixel size.
        :param str f: A token indicating the content type to return.  Overrides the HTTP \"Accept\" header if present.  A value of \"jop\" (content type \"image/x-jpegorpng\") indicates that either JPEG or PNG should be returned, whichever the server deems to be most appropriate for this particular image.  A value of \"wkb\" indicates CubeWerx's raster extension to the Well-Known-Binary format.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['collection_id', 'style_id', 'transparent', 'bgcolor', 'textcolor', 'scale', 'pixel_size', 'f']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_id_map_legend_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in local_var_params or
                local_var_params['collection_id'] is None):
            raise ApiValueError("Missing the required parameter `collection_id` when calling `collections_collection_id_map_legend_get`")  # noqa: E501

        if 'scale' in local_var_params and local_var_params['scale'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `scale` when calling `collections_collection_id_map_legend_get`, must be a value greater than `0`")  # noqa: E501
        if 'pixel_size' in local_var_params and local_var_params['pixel_size'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `pixel_size` when calling `collections_collection_id_map_legend_get`, must be a value greater than `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'collection_id' in local_var_params:
            path_params['collectionId'] = local_var_params['collection_id']  # noqa: E501

        query_params = []
        if 'style_id' in local_var_params:
            query_params.append(('styleId', local_var_params['style_id']))  # noqa: E501
        if 'transparent' in local_var_params:
            query_params.append(('transparent', local_var_params['transparent']))  # noqa: E501
        if 'bgcolor' in local_var_params:
            query_params.append(('bgcolor', local_var_params['bgcolor']))  # noqa: E501
        if 'textcolor' in local_var_params:
            query_params.append(('textcolor', local_var_params['textcolor']))  # noqa: E501
        if 'scale' in local_var_params:
            query_params.append(('scale', local_var_params['scale']))  # noqa: E501
        if 'pixel_size' in local_var_params:
            query_params.append(('pixelSize', local_var_params['pixel_size']))  # noqa: E501
        if 'f' in local_var_params:
            query_params.append(('f', local_var_params['f']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/x-jpegorpng', 'image/jpeg', 'image/png', 'image/tiff', 'image/gif', 'application/x-cubewerx-wkb', 'application/problem+json', 'text/xml', 'text/html', 'application/json', ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cwApiKeyHeader', 'cwApiKeyQuery', 'cwAuth', 'httpBearer', 'oauth2', 'openIdConnect', 'openIdConnect1']  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collectionId}/map/legend', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_id_styles_style_id_map_get(self, collection_id, style_id, **kwargs):  # noqa: E501
        """A map layer of the specified collection in the specified style.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_id_styles_style_id_map_get(collection_id, style_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_id: The identifier of a collection in this data store. (required)
        :param str style_id: The identifier of a style in this data store. (required)
        :param str crs: The coordinate reference system of the map.  If present, the bbox parameter must also be present.  If not present, the extent and native coordinate reference system of the thing being mapped will be used.
        :param list[float] bbox: The spatial extent of the map in crs units.  Syntax: \"minx,miny,maxx,maxy\".  If present, the crs parameter must also be present.  If not present, the extent and native coordinate reference system of the thing being mapped will be used.
        :param int width: The width (in pixels) of the map.  If unspecified, a reasonable default will be used.
        :param int height: The height (in pixels) of the map.  If unspecified, a reasonable default will be used.
        :param bool transparent: Whether or not the background of the image should be transparent (when supported by the requested image format).
        :param str bgcolor: Hexadecimal red-green-blue color value for the background color.  If not specified, the background color specified by the style (0xFFFFFF by default) will be used.
        :param float pixel_size: The physical linear size of a display pixel in millimetres.  If the display device has non-square pixels, then sqrt(width * height) should be provided.  The pixel units and scale rules in a style definition are with respect to a standardized rendering pixel size of 0.28mm.  Knowledge of the actual pixel size of the display device will allow the renderer to produce a map with the intended look even if the actual pixel size is significantly different from the standardized rendering pixel size.
        :param str datetime: Either a date-time or an interval, open or closed. Date and time expressions adhere to RFC 3339.  Open intervals are expressed using double-dots.  Examples:  * A date-time: \"2018-02-12T23:20:50Z\" * A closed interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\" * Open intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"  Only elements that have a temporal property that intersects the value of `datetime` are selected.
        :param str f: A token indicating the content type to return.  Overrides the HTTP \"Accept\" header if present.  A value of \"jop\" (content type \"image/x-jpegorpng\") indicates that either JPEG or PNG should be returned, whichever the server deems to be most appropriate for this particular image.  A value of \"wkb\" indicates CubeWerx's raster extension to the Well-Known-Binary format.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_id_styles_style_id_map_get_with_http_info(collection_id, style_id, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_id_styles_style_id_map_get_with_http_info(collection_id, style_id, **kwargs)  # noqa: E501
            return data

    def collections_collection_id_styles_style_id_map_get_with_http_info(self, collection_id, style_id, **kwargs):  # noqa: E501
        """A map layer of the specified collection in the specified style.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_id_styles_style_id_map_get_with_http_info(collection_id, style_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_id: The identifier of a collection in this data store. (required)
        :param str style_id: The identifier of a style in this data store. (required)
        :param str crs: The coordinate reference system of the map.  If present, the bbox parameter must also be present.  If not present, the extent and native coordinate reference system of the thing being mapped will be used.
        :param list[float] bbox: The spatial extent of the map in crs units.  Syntax: \"minx,miny,maxx,maxy\".  If present, the crs parameter must also be present.  If not present, the extent and native coordinate reference system of the thing being mapped will be used.
        :param int width: The width (in pixels) of the map.  If unspecified, a reasonable default will be used.
        :param int height: The height (in pixels) of the map.  If unspecified, a reasonable default will be used.
        :param bool transparent: Whether or not the background of the image should be transparent (when supported by the requested image format).
        :param str bgcolor: Hexadecimal red-green-blue color value for the background color.  If not specified, the background color specified by the style (0xFFFFFF by default) will be used.
        :param float pixel_size: The physical linear size of a display pixel in millimetres.  If the display device has non-square pixels, then sqrt(width * height) should be provided.  The pixel units and scale rules in a style definition are with respect to a standardized rendering pixel size of 0.28mm.  Knowledge of the actual pixel size of the display device will allow the renderer to produce a map with the intended look even if the actual pixel size is significantly different from the standardized rendering pixel size.
        :param str datetime: Either a date-time or an interval, open or closed. Date and time expressions adhere to RFC 3339.  Open intervals are expressed using double-dots.  Examples:  * A date-time: \"2018-02-12T23:20:50Z\" * A closed interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\" * Open intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"  Only elements that have a temporal property that intersects the value of `datetime` are selected.
        :param str f: A token indicating the content type to return.  Overrides the HTTP \"Accept\" header if present.  A value of \"jop\" (content type \"image/x-jpegorpng\") indicates that either JPEG or PNG should be returned, whichever the server deems to be most appropriate for this particular image.  A value of \"wkb\" indicates CubeWerx's raster extension to the Well-Known-Binary format.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['collection_id', 'style_id', 'crs', 'bbox', 'width', 'height', 'transparent', 'bgcolor', 'pixel_size', 'datetime', 'f']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_id_styles_style_id_map_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in local_var_params or
                local_var_params['collection_id'] is None):
            raise ApiValueError("Missing the required parameter `collection_id` when calling `collections_collection_id_styles_style_id_map_get`")  # noqa: E501
        # verify the required parameter 'style_id' is set
        if ('style_id' not in local_var_params or
                local_var_params['style_id'] is None):
            raise ApiValueError("Missing the required parameter `style_id` when calling `collections_collection_id_styles_style_id_map_get`")  # noqa: E501

        if ('bbox' in local_var_params and
                len(local_var_params['bbox']) > 4):
            raise ApiValueError("Invalid value for parameter `bbox` when calling `collections_collection_id_styles_style_id_map_get`, number of items must be less than or equal to `4`")  # noqa: E501
        if ('bbox' in local_var_params and
                len(local_var_params['bbox']) < 4):
            raise ApiValueError("Invalid value for parameter `bbox` when calling `collections_collection_id_styles_style_id_map_get`, number of items must be greater than or equal to `4`")  # noqa: E501
        if 'width' in local_var_params and local_var_params['width'] > 8000:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `width` when calling `collections_collection_id_styles_style_id_map_get`, must be a value less than or equal to `8000`")  # noqa: E501
        if 'width' in local_var_params and local_var_params['width'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `width` when calling `collections_collection_id_styles_style_id_map_get`, must be a value greater than or equal to `1`")  # noqa: E501
        if 'height' in local_var_params and local_var_params['height'] > 6000:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `height` when calling `collections_collection_id_styles_style_id_map_get`, must be a value less than or equal to `6000`")  # noqa: E501
        if 'height' in local_var_params and local_var_params['height'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `height` when calling `collections_collection_id_styles_style_id_map_get`, must be a value greater than or equal to `1`")  # noqa: E501
        if 'pixel_size' in local_var_params and local_var_params['pixel_size'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `pixel_size` when calling `collections_collection_id_styles_style_id_map_get`, must be a value greater than `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'collection_id' in local_var_params:
            path_params['collectionId'] = local_var_params['collection_id']  # noqa: E501
        if 'style_id' in local_var_params:
            path_params['styleId'] = local_var_params['style_id']  # noqa: E501

        query_params = []
        if 'crs' in local_var_params:
            query_params.append(('crs', local_var_params['crs']))  # noqa: E501
        if 'bbox' in local_var_params:
            query_params.append(('bbox', local_var_params['bbox']))  # noqa: E501
            collection_formats['bbox'] = 'csv'  # noqa: E501
        if 'width' in local_var_params:
            query_params.append(('width', local_var_params['width']))  # noqa: E501
        if 'height' in local_var_params:
            query_params.append(('height', local_var_params['height']))  # noqa: E501
        if 'transparent' in local_var_params:
            query_params.append(('transparent', local_var_params['transparent']))  # noqa: E501
        if 'bgcolor' in local_var_params:
            query_params.append(('bgcolor', local_var_params['bgcolor']))  # noqa: E501
        if 'pixel_size' in local_var_params:
            query_params.append(('pixelSize', local_var_params['pixel_size']))  # noqa: E501
        if 'datetime' in local_var_params:
            query_params.append(('datetime', local_var_params['datetime']))  # noqa: E501
        if 'f' in local_var_params:
            query_params.append(('f', local_var_params['f']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/x-jpegorpng', 'image/jpeg', 'image/png', 'image/tiff', 'image/gif', 'application/x-cubewerx-wkb', 'application/problem+json', 'text/xml', 'text/html', 'application/json', ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cwApiKeyHeader', 'cwApiKeyQuery', 'cwAuth', 'httpBearer', 'oauth2', 'openIdConnect', 'openIdConnect1']  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collectionId}/styles/{styleId}/map', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_id_styles_style_id_map_legend_get(self, collection_id, style_id, **kwargs):  # noqa: E501
        """A legend image showing a graphical representation of the specified collection as it would appear in the corresponding map in the specified style.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_id_styles_style_id_map_legend_get(collection_id, style_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_id: The identifier of a collection in this data store. (required)
        :param str style_id: The identifier of a style in this data store. (required)
        :param bool transparent: Whether or not the background of the image should be transparent (when supported by the requested image format).
        :param str bgcolor: Hexadecimal red-green-blue color value for the background color.  If not specified, the background color specified by the style (0xFFFFFF by default) will be used.
        :param str textcolor: Hexadecimal red-green-blue color value for the text color.  If not specified, a color that contrasts the background color will be used.
        :param float scale: If specified, a legend graphic specific to this scale (expressed as a scale denominator) will be returned.  Otherwise, a possibly-composite image providing a legend graphic for each of the scale ranges defined by the style will be returned.
        :param float pixel_size: The physical linear size of a display pixel in millimetres.  If the display device has non-square pixels, then sqrt(width * height) should be provided.  The pixel units and scale rules in a style definition are with respect to a standardized rendering pixel size of 0.28mm.  Knowledge of the actual pixel size of the display device will allow the renderer to produce a map with the intended look even if the actual pixel size is significantly different from the standardized rendering pixel size.
        :param str f: A token indicating the content type to return.  Overrides the HTTP \"Accept\" header if present.  A value of \"jop\" (content type \"image/x-jpegorpng\") indicates that either JPEG or PNG should be returned, whichever the server deems to be most appropriate for this particular image.  A value of \"wkb\" indicates CubeWerx's raster extension to the Well-Known-Binary format.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_id_styles_style_id_map_legend_get_with_http_info(collection_id, style_id, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_id_styles_style_id_map_legend_get_with_http_info(collection_id, style_id, **kwargs)  # noqa: E501
            return data

    def collections_collection_id_styles_style_id_map_legend_get_with_http_info(self, collection_id, style_id, **kwargs):  # noqa: E501
        """A legend image showing a graphical representation of the specified collection as it would appear in the corresponding map in the specified style.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_id_styles_style_id_map_legend_get_with_http_info(collection_id, style_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_id: The identifier of a collection in this data store. (required)
        :param str style_id: The identifier of a style in this data store. (required)
        :param bool transparent: Whether or not the background of the image should be transparent (when supported by the requested image format).
        :param str bgcolor: Hexadecimal red-green-blue color value for the background color.  If not specified, the background color specified by the style (0xFFFFFF by default) will be used.
        :param str textcolor: Hexadecimal red-green-blue color value for the text color.  If not specified, a color that contrasts the background color will be used.
        :param float scale: If specified, a legend graphic specific to this scale (expressed as a scale denominator) will be returned.  Otherwise, a possibly-composite image providing a legend graphic for each of the scale ranges defined by the style will be returned.
        :param float pixel_size: The physical linear size of a display pixel in millimetres.  If the display device has non-square pixels, then sqrt(width * height) should be provided.  The pixel units and scale rules in a style definition are with respect to a standardized rendering pixel size of 0.28mm.  Knowledge of the actual pixel size of the display device will allow the renderer to produce a map with the intended look even if the actual pixel size is significantly different from the standardized rendering pixel size.
        :param str f: A token indicating the content type to return.  Overrides the HTTP \"Accept\" header if present.  A value of \"jop\" (content type \"image/x-jpegorpng\") indicates that either JPEG or PNG should be returned, whichever the server deems to be most appropriate for this particular image.  A value of \"wkb\" indicates CubeWerx's raster extension to the Well-Known-Binary format.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['collection_id', 'style_id', 'transparent', 'bgcolor', 'textcolor', 'scale', 'pixel_size', 'f']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_id_styles_style_id_map_legend_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in local_var_params or
                local_var_params['collection_id'] is None):
            raise ApiValueError("Missing the required parameter `collection_id` when calling `collections_collection_id_styles_style_id_map_legend_get`")  # noqa: E501
        # verify the required parameter 'style_id' is set
        if ('style_id' not in local_var_params or
                local_var_params['style_id'] is None):
            raise ApiValueError("Missing the required parameter `style_id` when calling `collections_collection_id_styles_style_id_map_legend_get`")  # noqa: E501

        if 'scale' in local_var_params and local_var_params['scale'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `scale` when calling `collections_collection_id_styles_style_id_map_legend_get`, must be a value greater than `0`")  # noqa: E501
        if 'pixel_size' in local_var_params and local_var_params['pixel_size'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `pixel_size` when calling `collections_collection_id_styles_style_id_map_legend_get`, must be a value greater than `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'collection_id' in local_var_params:
            path_params['collectionId'] = local_var_params['collection_id']  # noqa: E501
        if 'style_id' in local_var_params:
            path_params['styleId'] = local_var_params['style_id']  # noqa: E501

        query_params = []
        if 'transparent' in local_var_params:
            query_params.append(('transparent', local_var_params['transparent']))  # noqa: E501
        if 'bgcolor' in local_var_params:
            query_params.append(('bgcolor', local_var_params['bgcolor']))  # noqa: E501
        if 'textcolor' in local_var_params:
            query_params.append(('textcolor', local_var_params['textcolor']))  # noqa: E501
        if 'scale' in local_var_params:
            query_params.append(('scale', local_var_params['scale']))  # noqa: E501
        if 'pixel_size' in local_var_params:
            query_params.append(('pixelSize', local_var_params['pixel_size']))  # noqa: E501
        if 'f' in local_var_params:
            query_params.append(('f', local_var_params['f']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/x-jpegorpng', 'image/jpeg', 'image/png', 'image/tiff', 'image/gif', 'application/x-cubewerx-wkb', 'application/problem+json', 'text/xml', 'text/html', 'application/json', ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cwApiKeyHeader', 'cwApiKeyQuery', 'cwAuth', 'httpBearer', 'oauth2', 'openIdConnect', 'openIdConnect1']  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collectionId}/styles/{styleId}/map/legend', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def map_get(self, **kwargs):  # noqa: E501
        """A map layer consisting of one or more collections.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.map_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] geodata: A comma-separated list of collection identifiers indicating the collections to be rendered.  Each of the specified collections must be renderable in the specified style.  The leftmost collection in the list will be rendered bottommost, the next one over that, and so on.  In the absence of a geodata parameter, all of the collections that are renderable in specified style are rendered, in the order that the server deems most appropriate.
        :param str style_id: The identifier of a style in this data store.  If no geodata parameter is present, all of the collections that are renderable in this style are rendered in this style.  If a geodata parameter is present, all of the specified collections must be renderable in the specified style.  If no styleId parameter is present, the default style of each of the specified collections (or of all mappable collections in the absence of a geodata parameter) will be rendered.
        :param str crs: The coordinate reference system of the map.  If present, the bbox parameter must also be present.  If not present, the extent and native coordinate reference system of the thing being mapped will be used.
        :param list[float] bbox: The spatial extent of the map in crs units.  Syntax: \"minx,miny,maxx,maxy\".  If present, the crs parameter must also be present.  If not present, the extent and native coordinate reference system of the thing being mapped will be used.
        :param int width: The width (in pixels) of the map.  If unspecified, a reasonable default will be used.
        :param int height: The height (in pixels) of the map.  If unspecified, a reasonable default will be used.
        :param bool transparent: Whether or not the background of the image should be transparent (when supported by the requested image format).
        :param str bgcolor: Hexadecimal red-green-blue color value for the background color.  If not specified, the background color specified by the style (0xFFFFFF by default) will be used.
        :param float pixel_size: The physical linear size of a display pixel in millimetres.  If the display device has non-square pixels, then sqrt(width * height) should be provided.  The pixel units and scale rules in a style definition are with respect to a standardized rendering pixel size of 0.28mm.  Knowledge of the actual pixel size of the display device will allow the renderer to produce a map with the intended look even if the actual pixel size is significantly different from the standardized rendering pixel size.
        :param str datetime: Either a date-time or an interval, open or closed. Date and time expressions adhere to RFC 3339.  Open intervals are expressed using double-dots.  Examples:  * A date-time: \"2018-02-12T23:20:50Z\" * A closed interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\" * Open intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"  Only elements that have a temporal property that intersects the value of `datetime` are selected.
        :param str f: A token indicating the content type to return.  Overrides the HTTP \"Accept\" header if present.  A value of \"jop\" (content type \"image/x-jpegorpng\") indicates that either JPEG or PNG should be returned, whichever the server deems to be most appropriate for this particular image.  A value of \"wkb\" indicates CubeWerx's raster extension to the Well-Known-Binary format.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.map_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.map_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def map_get_with_http_info(self, **kwargs):  # noqa: E501
        """A map layer consisting of one or more collections.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.map_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] geodata: A comma-separated list of collection identifiers indicating the collections to be rendered.  Each of the specified collections must be renderable in the specified style.  The leftmost collection in the list will be rendered bottommost, the next one over that, and so on.  In the absence of a geodata parameter, all of the collections that are renderable in specified style are rendered, in the order that the server deems most appropriate.
        :param str style_id: The identifier of a style in this data store.  If no geodata parameter is present, all of the collections that are renderable in this style are rendered in this style.  If a geodata parameter is present, all of the specified collections must be renderable in the specified style.  If no styleId parameter is present, the default style of each of the specified collections (or of all mappable collections in the absence of a geodata parameter) will be rendered.
        :param str crs: The coordinate reference system of the map.  If present, the bbox parameter must also be present.  If not present, the extent and native coordinate reference system of the thing being mapped will be used.
        :param list[float] bbox: The spatial extent of the map in crs units.  Syntax: \"minx,miny,maxx,maxy\".  If present, the crs parameter must also be present.  If not present, the extent and native coordinate reference system of the thing being mapped will be used.
        :param int width: The width (in pixels) of the map.  If unspecified, a reasonable default will be used.
        :param int height: The height (in pixels) of the map.  If unspecified, a reasonable default will be used.
        :param bool transparent: Whether or not the background of the image should be transparent (when supported by the requested image format).
        :param str bgcolor: Hexadecimal red-green-blue color value for the background color.  If not specified, the background color specified by the style (0xFFFFFF by default) will be used.
        :param float pixel_size: The physical linear size of a display pixel in millimetres.  If the display device has non-square pixels, then sqrt(width * height) should be provided.  The pixel units and scale rules in a style definition are with respect to a standardized rendering pixel size of 0.28mm.  Knowledge of the actual pixel size of the display device will allow the renderer to produce a map with the intended look even if the actual pixel size is significantly different from the standardized rendering pixel size.
        :param str datetime: Either a date-time or an interval, open or closed. Date and time expressions adhere to RFC 3339.  Open intervals are expressed using double-dots.  Examples:  * A date-time: \"2018-02-12T23:20:50Z\" * A closed interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\" * Open intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"  Only elements that have a temporal property that intersects the value of `datetime` are selected.
        :param str f: A token indicating the content type to return.  Overrides the HTTP \"Accept\" header if present.  A value of \"jop\" (content type \"image/x-jpegorpng\") indicates that either JPEG or PNG should be returned, whichever the server deems to be most appropriate for this particular image.  A value of \"wkb\" indicates CubeWerx's raster extension to the Well-Known-Binary format.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['geodata', 'style_id', 'crs', 'bbox', 'width', 'height', 'transparent', 'bgcolor', 'pixel_size', 'datetime', 'f']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method map_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if ('bbox' in local_var_params and
                len(local_var_params['bbox']) > 4):
            raise ApiValueError("Invalid value for parameter `bbox` when calling `map_get`, number of items must be less than or equal to `4`")  # noqa: E501
        if ('bbox' in local_var_params and
                len(local_var_params['bbox']) < 4):
            raise ApiValueError("Invalid value for parameter `bbox` when calling `map_get`, number of items must be greater than or equal to `4`")  # noqa: E501
        if 'width' in local_var_params and local_var_params['width'] > 8000:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `width` when calling `map_get`, must be a value less than or equal to `8000`")  # noqa: E501
        if 'width' in local_var_params and local_var_params['width'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `width` when calling `map_get`, must be a value greater than or equal to `1`")  # noqa: E501
        if 'height' in local_var_params and local_var_params['height'] > 6000:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `height` when calling `map_get`, must be a value less than or equal to `6000`")  # noqa: E501
        if 'height' in local_var_params and local_var_params['height'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `height` when calling `map_get`, must be a value greater than or equal to `1`")  # noqa: E501
        if 'pixel_size' in local_var_params and local_var_params['pixel_size'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `pixel_size` when calling `map_get`, must be a value greater than `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'geodata' in local_var_params:
            query_params.append(('geodata', local_var_params['geodata']))  # noqa: E501
            collection_formats['geodata'] = 'csv'  # noqa: E501
        if 'style_id' in local_var_params:
            query_params.append(('styleId', local_var_params['style_id']))  # noqa: E501
        if 'crs' in local_var_params:
            query_params.append(('crs', local_var_params['crs']))  # noqa: E501
        if 'bbox' in local_var_params:
            query_params.append(('bbox', local_var_params['bbox']))  # noqa: E501
            collection_formats['bbox'] = 'csv'  # noqa: E501
        if 'width' in local_var_params:
            query_params.append(('width', local_var_params['width']))  # noqa: E501
        if 'height' in local_var_params:
            query_params.append(('height', local_var_params['height']))  # noqa: E501
        if 'transparent' in local_var_params:
            query_params.append(('transparent', local_var_params['transparent']))  # noqa: E501
        if 'bgcolor' in local_var_params:
            query_params.append(('bgcolor', local_var_params['bgcolor']))  # noqa: E501
        if 'pixel_size' in local_var_params:
            query_params.append(('pixelSize', local_var_params['pixel_size']))  # noqa: E501
        if 'datetime' in local_var_params:
            query_params.append(('datetime', local_var_params['datetime']))  # noqa: E501
        if 'f' in local_var_params:
            query_params.append(('f', local_var_params['f']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/x-jpegorpng', 'image/jpeg', 'image/png', 'image/tiff', 'image/gif', 'application/x-cubewerx-wkb', 'application/problem+json', 'text/xml', 'text/html', 'application/json', ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cwApiKeyHeader', 'cwApiKeyQuery', 'cwAuth', 'httpBearer', 'oauth2', 'openIdConnect', 'openIdConnect1']  # noqa: E501

        return self.api_client.call_api(
            '/map', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def map_legend_get(self, **kwargs):  # noqa: E501
        """A legend image showing a graphical representation of one or more collections as they would appear in the corresponding map.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.map_legend_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] geodata: A comma-separated list of collection identifiers indicating the collections to be rendered.  Each of the specified collections must be renderable in the specified style.  The leftmost collection in the list will be rendered bottommost, the next one over that, and so on.  In the absence of a geodata parameter, all of the collections that are renderable in specified style are rendered, in the order that the server deems most appropriate.
        :param str style_id: The identifier of a style in this data store.  If no geodata parameter is present, all of the collections that are renderable in this style are rendered in this style.  If a geodata parameter is present, all of the specified collections must be renderable in the specified style.  If no styleId parameter is present, the default style of each of the specified collections (or of all mappable collections in the absence of a geodata parameter) will be rendered.
        :param bool transparent: Whether or not the background of the image should be transparent (when supported by the requested image format).
        :param str bgcolor: Hexadecimal red-green-blue color value for the background color.  If not specified, the background color specified by the style (0xFFFFFF by default) will be used.
        :param str textcolor: Hexadecimal red-green-blue color value for the text color.  If not specified, a color that contrasts the background color will be used.
        :param float scale: If specified, a legend graphic specific to this scale (expressed as a scale denominator) will be returned.  Otherwise, a possibly-composite image providing a legend graphic for each of the scale ranges defined by the style will be returned.
        :param float pixel_size: The physical linear size of a display pixel in millimetres.  If the display device has non-square pixels, then sqrt(width * height) should be provided.  The pixel units and scale rules in a style definition are with respect to a standardized rendering pixel size of 0.28mm.  Knowledge of the actual pixel size of the display device will allow the renderer to produce a map with the intended look even if the actual pixel size is significantly different from the standardized rendering pixel size.
        :param str f: A token indicating the content type to return.  Overrides the HTTP \"Accept\" header if present.  A value of \"jop\" (content type \"image/x-jpegorpng\") indicates that either JPEG or PNG should be returned, whichever the server deems to be most appropriate for this particular image.  A value of \"wkb\" indicates CubeWerx's raster extension to the Well-Known-Binary format.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.map_legend_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.map_legend_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def map_legend_get_with_http_info(self, **kwargs):  # noqa: E501
        """A legend image showing a graphical representation of one or more collections as they would appear in the corresponding map.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.map_legend_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] geodata: A comma-separated list of collection identifiers indicating the collections to be rendered.  Each of the specified collections must be renderable in the specified style.  The leftmost collection in the list will be rendered bottommost, the next one over that, and so on.  In the absence of a geodata parameter, all of the collections that are renderable in specified style are rendered, in the order that the server deems most appropriate.
        :param str style_id: The identifier of a style in this data store.  If no geodata parameter is present, all of the collections that are renderable in this style are rendered in this style.  If a geodata parameter is present, all of the specified collections must be renderable in the specified style.  If no styleId parameter is present, the default style of each of the specified collections (or of all mappable collections in the absence of a geodata parameter) will be rendered.
        :param bool transparent: Whether or not the background of the image should be transparent (when supported by the requested image format).
        :param str bgcolor: Hexadecimal red-green-blue color value for the background color.  If not specified, the background color specified by the style (0xFFFFFF by default) will be used.
        :param str textcolor: Hexadecimal red-green-blue color value for the text color.  If not specified, a color that contrasts the background color will be used.
        :param float scale: If specified, a legend graphic specific to this scale (expressed as a scale denominator) will be returned.  Otherwise, a possibly-composite image providing a legend graphic for each of the scale ranges defined by the style will be returned.
        :param float pixel_size: The physical linear size of a display pixel in millimetres.  If the display device has non-square pixels, then sqrt(width * height) should be provided.  The pixel units and scale rules in a style definition are with respect to a standardized rendering pixel size of 0.28mm.  Knowledge of the actual pixel size of the display device will allow the renderer to produce a map with the intended look even if the actual pixel size is significantly different from the standardized rendering pixel size.
        :param str f: A token indicating the content type to return.  Overrides the HTTP \"Accept\" header if present.  A value of \"jop\" (content type \"image/x-jpegorpng\") indicates that either JPEG or PNG should be returned, whichever the server deems to be most appropriate for this particular image.  A value of \"wkb\" indicates CubeWerx's raster extension to the Well-Known-Binary format.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['geodata', 'style_id', 'transparent', 'bgcolor', 'textcolor', 'scale', 'pixel_size', 'f']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method map_legend_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if 'scale' in local_var_params and local_var_params['scale'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `scale` when calling `map_legend_get`, must be a value greater than `0`")  # noqa: E501
        if 'pixel_size' in local_var_params and local_var_params['pixel_size'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `pixel_size` when calling `map_legend_get`, must be a value greater than `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'geodata' in local_var_params:
            query_params.append(('geodata', local_var_params['geodata']))  # noqa: E501
            collection_formats['geodata'] = 'csv'  # noqa: E501
        if 'style_id' in local_var_params:
            query_params.append(('styleId', local_var_params['style_id']))  # noqa: E501
        if 'transparent' in local_var_params:
            query_params.append(('transparent', local_var_params['transparent']))  # noqa: E501
        if 'bgcolor' in local_var_params:
            query_params.append(('bgcolor', local_var_params['bgcolor']))  # noqa: E501
        if 'textcolor' in local_var_params:
            query_params.append(('textcolor', local_var_params['textcolor']))  # noqa: E501
        if 'scale' in local_var_params:
            query_params.append(('scale', local_var_params['scale']))  # noqa: E501
        if 'pixel_size' in local_var_params:
            query_params.append(('pixelSize', local_var_params['pixel_size']))  # noqa: E501
        if 'f' in local_var_params:
            query_params.append(('f', local_var_params['f']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/x-jpegorpng', 'image/jpeg', 'image/png', 'image/tiff', 'image/gif', 'application/x-cubewerx-wkb', 'application/problem+json', 'text/xml', 'text/html', 'application/json', ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cwApiKeyHeader', 'cwApiKeyQuery', 'cwAuth', 'httpBearer', 'oauth2', 'openIdConnect', 'openIdConnect1']  # noqa: E501

        return self.api_client.call_api(
            '/map/legend', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def styles_style_id_map_get(self, style_id, **kwargs):  # noqa: E501
        """A map layer consisting of one or more collections in the specified style.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.styles_style_id_map_get(style_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str style_id: The identifier of a style in this data store.  If no geodata parameter is present, all of the collections that are renderable in this style are rendered in this style.  If a geodata parameter is present, all of the specified collections must be renderable in the specified style. (required)
        :param list[str] geodata: A comma-separated list of collection identifiers indicating the collections to be rendered.  Each of the specified collections must be renderable in the specified style.  The leftmost collection in the list will be rendered bottommost, the next one over that, and so on.  In the absence of a geodata parameter, all of the collections that are renderable in specified style are rendered, in the order that the server deems most appropriate.
        :param str crs: The coordinate reference system of the map.  If present, the bbox parameter must also be present.  If not present, the extent and native coordinate reference system of the thing being mapped will be used.
        :param list[float] bbox: The spatial extent of the map in crs units.  Syntax: \"minx,miny,maxx,maxy\".  If present, the crs parameter must also be present.  If not present, the extent and native coordinate reference system of the thing being mapped will be used.
        :param int width: The width (in pixels) of the map.  If unspecified, a reasonable default will be used.
        :param int height: The height (in pixels) of the map.  If unspecified, a reasonable default will be used.
        :param bool transparent: Whether or not the background of the image should be transparent (when supported by the requested image format).
        :param str bgcolor: Hexadecimal red-green-blue color value for the background color.  If not specified, the background color specified by the style (0xFFFFFF by default) will be used.
        :param float pixel_size: The physical linear size of a display pixel in millimetres.  If the display device has non-square pixels, then sqrt(width * height) should be provided.  The pixel units and scale rules in a style definition are with respect to a standardized rendering pixel size of 0.28mm.  Knowledge of the actual pixel size of the display device will allow the renderer to produce a map with the intended look even if the actual pixel size is significantly different from the standardized rendering pixel size.
        :param str datetime: Either a date-time or an interval, open or closed. Date and time expressions adhere to RFC 3339.  Open intervals are expressed using double-dots.  Examples:  * A date-time: \"2018-02-12T23:20:50Z\" * A closed interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\" * Open intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"  Only elements that have a temporal property that intersects the value of `datetime` are selected.
        :param str f: A token indicating the content type to return.  Overrides the HTTP \"Accept\" header if present.  A value of \"jop\" (content type \"image/x-jpegorpng\") indicates that either JPEG or PNG should be returned, whichever the server deems to be most appropriate for this particular image.  A value of \"wkb\" indicates CubeWerx's raster extension to the Well-Known-Binary format.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.styles_style_id_map_get_with_http_info(style_id, **kwargs)  # noqa: E501
        else:
            (data) = self.styles_style_id_map_get_with_http_info(style_id, **kwargs)  # noqa: E501
            return data

    def styles_style_id_map_get_with_http_info(self, style_id, **kwargs):  # noqa: E501
        """A map layer consisting of one or more collections in the specified style.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.styles_style_id_map_get_with_http_info(style_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str style_id: The identifier of a style in this data store.  If no geodata parameter is present, all of the collections that are renderable in this style are rendered in this style.  If a geodata parameter is present, all of the specified collections must be renderable in the specified style. (required)
        :param list[str] geodata: A comma-separated list of collection identifiers indicating the collections to be rendered.  Each of the specified collections must be renderable in the specified style.  The leftmost collection in the list will be rendered bottommost, the next one over that, and so on.  In the absence of a geodata parameter, all of the collections that are renderable in specified style are rendered, in the order that the server deems most appropriate.
        :param str crs: The coordinate reference system of the map.  If present, the bbox parameter must also be present.  If not present, the extent and native coordinate reference system of the thing being mapped will be used.
        :param list[float] bbox: The spatial extent of the map in crs units.  Syntax: \"minx,miny,maxx,maxy\".  If present, the crs parameter must also be present.  If not present, the extent and native coordinate reference system of the thing being mapped will be used.
        :param int width: The width (in pixels) of the map.  If unspecified, a reasonable default will be used.
        :param int height: The height (in pixels) of the map.  If unspecified, a reasonable default will be used.
        :param bool transparent: Whether or not the background of the image should be transparent (when supported by the requested image format).
        :param str bgcolor: Hexadecimal red-green-blue color value for the background color.  If not specified, the background color specified by the style (0xFFFFFF by default) will be used.
        :param float pixel_size: The physical linear size of a display pixel in millimetres.  If the display device has non-square pixels, then sqrt(width * height) should be provided.  The pixel units and scale rules in a style definition are with respect to a standardized rendering pixel size of 0.28mm.  Knowledge of the actual pixel size of the display device will allow the renderer to produce a map with the intended look even if the actual pixel size is significantly different from the standardized rendering pixel size.
        :param str datetime: Either a date-time or an interval, open or closed. Date and time expressions adhere to RFC 3339.  Open intervals are expressed using double-dots.  Examples:  * A date-time: \"2018-02-12T23:20:50Z\" * A closed interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\" * Open intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"  Only elements that have a temporal property that intersects the value of `datetime` are selected.
        :param str f: A token indicating the content type to return.  Overrides the HTTP \"Accept\" header if present.  A value of \"jop\" (content type \"image/x-jpegorpng\") indicates that either JPEG or PNG should be returned, whichever the server deems to be most appropriate for this particular image.  A value of \"wkb\" indicates CubeWerx's raster extension to the Well-Known-Binary format.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['style_id', 'geodata', 'crs', 'bbox', 'width', 'height', 'transparent', 'bgcolor', 'pixel_size', 'datetime', 'f']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method styles_style_id_map_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'style_id' is set
        if ('style_id' not in local_var_params or
                local_var_params['style_id'] is None):
            raise ApiValueError("Missing the required parameter `style_id` when calling `styles_style_id_map_get`")  # noqa: E501

        if ('bbox' in local_var_params and
                len(local_var_params['bbox']) > 4):
            raise ApiValueError("Invalid value for parameter `bbox` when calling `styles_style_id_map_get`, number of items must be less than or equal to `4`")  # noqa: E501
        if ('bbox' in local_var_params and
                len(local_var_params['bbox']) < 4):
            raise ApiValueError("Invalid value for parameter `bbox` when calling `styles_style_id_map_get`, number of items must be greater than or equal to `4`")  # noqa: E501
        if 'width' in local_var_params and local_var_params['width'] > 8000:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `width` when calling `styles_style_id_map_get`, must be a value less than or equal to `8000`")  # noqa: E501
        if 'width' in local_var_params and local_var_params['width'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `width` when calling `styles_style_id_map_get`, must be a value greater than or equal to `1`")  # noqa: E501
        if 'height' in local_var_params and local_var_params['height'] > 6000:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `height` when calling `styles_style_id_map_get`, must be a value less than or equal to `6000`")  # noqa: E501
        if 'height' in local_var_params and local_var_params['height'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `height` when calling `styles_style_id_map_get`, must be a value greater than or equal to `1`")  # noqa: E501
        if 'pixel_size' in local_var_params and local_var_params['pixel_size'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `pixel_size` when calling `styles_style_id_map_get`, must be a value greater than `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'style_id' in local_var_params:
            path_params['styleId'] = local_var_params['style_id']  # noqa: E501

        query_params = []
        if 'geodata' in local_var_params:
            query_params.append(('geodata', local_var_params['geodata']))  # noqa: E501
            collection_formats['geodata'] = 'csv'  # noqa: E501
        if 'crs' in local_var_params:
            query_params.append(('crs', local_var_params['crs']))  # noqa: E501
        if 'bbox' in local_var_params:
            query_params.append(('bbox', local_var_params['bbox']))  # noqa: E501
            collection_formats['bbox'] = 'csv'  # noqa: E501
        if 'width' in local_var_params:
            query_params.append(('width', local_var_params['width']))  # noqa: E501
        if 'height' in local_var_params:
            query_params.append(('height', local_var_params['height']))  # noqa: E501
        if 'transparent' in local_var_params:
            query_params.append(('transparent', local_var_params['transparent']))  # noqa: E501
        if 'bgcolor' in local_var_params:
            query_params.append(('bgcolor', local_var_params['bgcolor']))  # noqa: E501
        if 'pixel_size' in local_var_params:
            query_params.append(('pixelSize', local_var_params['pixel_size']))  # noqa: E501
        if 'datetime' in local_var_params:
            query_params.append(('datetime', local_var_params['datetime']))  # noqa: E501
        if 'f' in local_var_params:
            query_params.append(('f', local_var_params['f']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/x-jpegorpng', 'image/jpeg', 'image/png', 'image/tiff', 'image/gif', 'application/x-cubewerx-wkb', 'application/problem+json', 'text/xml', 'text/html', 'application/json', ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cwApiKeyHeader', 'cwApiKeyQuery', 'cwAuth', 'httpBearer', 'oauth2', 'openIdConnect', 'openIdConnect1']  # noqa: E501

        return self.api_client.call_api(
            '/styles/{styleId}/map', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def styles_style_id_map_legend_get(self, style_id, **kwargs):  # noqa: E501
        """A legend image showing a graphical representation of one or more collections as they would appear in the corresponding map in the specified style.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.styles_style_id_map_legend_get(style_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str style_id: The identifier of a style in this data store.  If no geodata parameter is present, all of the collections that are renderable in this style are rendered in this style.  If a geodata parameter is present, all of the specified collections must be renderable in the specified style. (required)
        :param list[str] geodata: A comma-separated list of collection identifiers indicating the collections to be rendered.  Each of the specified collections must be renderable in the specified style.  The leftmost collection in the list will be rendered bottommost, the next one over that, and so on.  In the absence of a geodata parameter, all of the collections that are renderable in specified style are rendered, in the order that the server deems most appropriate.
        :param bool transparent: Whether or not the background of the image should be transparent (when supported by the requested image format).
        :param str bgcolor: Hexadecimal red-green-blue color value for the background color.  If not specified, the background color specified by the style (0xFFFFFF by default) will be used.
        :param str textcolor: Hexadecimal red-green-blue color value for the text color.  If not specified, a color that contrasts the background color will be used.
        :param float scale: If specified, a legend graphic specific to this scale (expressed as a scale denominator) will be returned.  Otherwise, a possibly-composite image providing a legend graphic for each of the scale ranges defined by the style will be returned.
        :param float pixel_size: The physical linear size of a display pixel in millimetres.  If the display device has non-square pixels, then sqrt(width * height) should be provided.  The pixel units and scale rules in a style definition are with respect to a standardized rendering pixel size of 0.28mm.  Knowledge of the actual pixel size of the display device will allow the renderer to produce a map with the intended look even if the actual pixel size is significantly different from the standardized rendering pixel size.
        :param str f: A token indicating the content type to return.  Overrides the HTTP \"Accept\" header if present.  A value of \"jop\" (content type \"image/x-jpegorpng\") indicates that either JPEG or PNG should be returned, whichever the server deems to be most appropriate for this particular image.  A value of \"wkb\" indicates CubeWerx's raster extension to the Well-Known-Binary format.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.styles_style_id_map_legend_get_with_http_info(style_id, **kwargs)  # noqa: E501
        else:
            (data) = self.styles_style_id_map_legend_get_with_http_info(style_id, **kwargs)  # noqa: E501
            return data

    def styles_style_id_map_legend_get_with_http_info(self, style_id, **kwargs):  # noqa: E501
        """A legend image showing a graphical representation of one or more collections as they would appear in the corresponding map in the specified style.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.styles_style_id_map_legend_get_with_http_info(style_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str style_id: The identifier of a style in this data store.  If no geodata parameter is present, all of the collections that are renderable in this style are rendered in this style.  If a geodata parameter is present, all of the specified collections must be renderable in the specified style. (required)
        :param list[str] geodata: A comma-separated list of collection identifiers indicating the collections to be rendered.  Each of the specified collections must be renderable in the specified style.  The leftmost collection in the list will be rendered bottommost, the next one over that, and so on.  In the absence of a geodata parameter, all of the collections that are renderable in specified style are rendered, in the order that the server deems most appropriate.
        :param bool transparent: Whether or not the background of the image should be transparent (when supported by the requested image format).
        :param str bgcolor: Hexadecimal red-green-blue color value for the background color.  If not specified, the background color specified by the style (0xFFFFFF by default) will be used.
        :param str textcolor: Hexadecimal red-green-blue color value for the text color.  If not specified, a color that contrasts the background color will be used.
        :param float scale: If specified, a legend graphic specific to this scale (expressed as a scale denominator) will be returned.  Otherwise, a possibly-composite image providing a legend graphic for each of the scale ranges defined by the style will be returned.
        :param float pixel_size: The physical linear size of a display pixel in millimetres.  If the display device has non-square pixels, then sqrt(width * height) should be provided.  The pixel units and scale rules in a style definition are with respect to a standardized rendering pixel size of 0.28mm.  Knowledge of the actual pixel size of the display device will allow the renderer to produce a map with the intended look even if the actual pixel size is significantly different from the standardized rendering pixel size.
        :param str f: A token indicating the content type to return.  Overrides the HTTP \"Accept\" header if present.  A value of \"jop\" (content type \"image/x-jpegorpng\") indicates that either JPEG or PNG should be returned, whichever the server deems to be most appropriate for this particular image.  A value of \"wkb\" indicates CubeWerx's raster extension to the Well-Known-Binary format.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['style_id', 'geodata', 'transparent', 'bgcolor', 'textcolor', 'scale', 'pixel_size', 'f']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method styles_style_id_map_legend_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'style_id' is set
        if ('style_id' not in local_var_params or
                local_var_params['style_id'] is None):
            raise ApiValueError("Missing the required parameter `style_id` when calling `styles_style_id_map_legend_get`")  # noqa: E501

        if 'scale' in local_var_params and local_var_params['scale'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `scale` when calling `styles_style_id_map_legend_get`, must be a value greater than `0`")  # noqa: E501
        if 'pixel_size' in local_var_params and local_var_params['pixel_size'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `pixel_size` when calling `styles_style_id_map_legend_get`, must be a value greater than `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'style_id' in local_var_params:
            path_params['styleId'] = local_var_params['style_id']  # noqa: E501

        query_params = []
        if 'geodata' in local_var_params:
            query_params.append(('geodata', local_var_params['geodata']))  # noqa: E501
            collection_formats['geodata'] = 'csv'  # noqa: E501
        if 'transparent' in local_var_params:
            query_params.append(('transparent', local_var_params['transparent']))  # noqa: E501
        if 'bgcolor' in local_var_params:
            query_params.append(('bgcolor', local_var_params['bgcolor']))  # noqa: E501
        if 'textcolor' in local_var_params:
            query_params.append(('textcolor', local_var_params['textcolor']))  # noqa: E501
        if 'scale' in local_var_params:
            query_params.append(('scale', local_var_params['scale']))  # noqa: E501
        if 'pixel_size' in local_var_params:
            query_params.append(('pixelSize', local_var_params['pixel_size']))  # noqa: E501
        if 'f' in local_var_params:
            query_params.append(('f', local_var_params['f']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/x-jpegorpng', 'image/jpeg', 'image/png', 'image/tiff', 'image/gif', 'application/x-cubewerx-wkb', 'application/problem+json', 'text/xml', 'text/html', 'application/json', ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cwApiKeyHeader', 'cwApiKeyQuery', 'cwAuth', 'httpBearer', 'oauth2', 'openIdConnect', 'openIdConnect1']  # noqa: E501

        return self.api_client.call_api(
            '/styles/{styleId}/map/legend', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
