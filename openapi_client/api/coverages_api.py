# coding: utf-8

"""
    Daraa

    This data store is offered by CubeWerx Inc. as a demonstration of its in-progress OGC API implementation.  # noqa: E501

    The version of the OpenAPI document: 9.3.45
    Contact: mgalluch@cubewerx.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (
    ApiTypeError,
    ApiValueError
)


class CoveragesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def collections_collection_id_coverage_domainset_get(self, collection_id, **kwargs):  # noqa: E501
        """The domain set of the coverage of a collection.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_id_coverage_domainset_get(collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_id: The identifier of a collection in this data store. (required)
        :param list[str] subset: Specifies a subset of the coverage along one or more axes.  See the \"OGC API - Coverages - Part 1: Core\" specification for a description of the syntax.
        :param float scale_factor: A scale factor to be applied to all coverage axes.  A value of 1 leaves the coverage unscaled, a value between 0 and 1 scales down (reduces target domain), and a value greater than 1 scales up (enlarges target domain).
        :param str scale_axes: See Requirement 20 of the \"OGC® Web Coverage Service Interface Standard - Scaling Extension\" (OGC 12-039).
        :param str scale_size: See Requirement 21 of the \"OGC® Web Coverage Service Interface Standard - Scaling Extension\" (OGC 12-039).
        :param str scale_extent: See Requirement 22 of the \"OGC® Web Coverage Service Interface Standard - Scaling Extension\" (OGC 12-039).
        :param list[float] bbox: Specifies a subset of the coverage using a bounding box (as an alternative to using the subset parameter). The bounding box is provided as four or six numbers, depending on whether the coordinate reference system includes a vertical axis (elevation or depth):  * Lower left corner, coordinate axis 1 * Lower left corner, coordinate axis 2 * Lower left corner, coordinate axis 3 (optional) * Upper right corner, coordinate axis 1 * Upper right corner, coordinate axis 2 * Upper right corner, coordinate axis 3 (optional)  The coordinate reference system of the values is WGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate reference system is specified by the 'bbox-crs' parameter.  For WGS 84 longitude/latitude the values are in most cases the sequence of minimum longitude, minimum latitude, maximum longitude and maximum latitude. However, in cases where the box spans the antimeridian the first value (west-most box edge) is larger than the third value (east-most box edge).
        :param str bbox_crs: The coordinate reference system of the specified bbox.
        :param int width: The number of samples wide to scale the requested coverage subset to.  This is an alternative to using the scaleSize parameter.
        :param int height: The number of samples high to scale the requested coverage subset to.  This is an alternative to using the scaleSize parameter.
        :param str f: A token indicating the content type to return.  Overrides the HTTP \"Accept\" header if present.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_id_coverage_domainset_get_with_http_info(collection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_id_coverage_domainset_get_with_http_info(collection_id, **kwargs)  # noqa: E501
            return data

    def collections_collection_id_coverage_domainset_get_with_http_info(self, collection_id, **kwargs):  # noqa: E501
        """The domain set of the coverage of a collection.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_id_coverage_domainset_get_with_http_info(collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_id: The identifier of a collection in this data store. (required)
        :param list[str] subset: Specifies a subset of the coverage along one or more axes.  See the \"OGC API - Coverages - Part 1: Core\" specification for a description of the syntax.
        :param float scale_factor: A scale factor to be applied to all coverage axes.  A value of 1 leaves the coverage unscaled, a value between 0 and 1 scales down (reduces target domain), and a value greater than 1 scales up (enlarges target domain).
        :param str scale_axes: See Requirement 20 of the \"OGC® Web Coverage Service Interface Standard - Scaling Extension\" (OGC 12-039).
        :param str scale_size: See Requirement 21 of the \"OGC® Web Coverage Service Interface Standard - Scaling Extension\" (OGC 12-039).
        :param str scale_extent: See Requirement 22 of the \"OGC® Web Coverage Service Interface Standard - Scaling Extension\" (OGC 12-039).
        :param list[float] bbox: Specifies a subset of the coverage using a bounding box (as an alternative to using the subset parameter). The bounding box is provided as four or six numbers, depending on whether the coordinate reference system includes a vertical axis (elevation or depth):  * Lower left corner, coordinate axis 1 * Lower left corner, coordinate axis 2 * Lower left corner, coordinate axis 3 (optional) * Upper right corner, coordinate axis 1 * Upper right corner, coordinate axis 2 * Upper right corner, coordinate axis 3 (optional)  The coordinate reference system of the values is WGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate reference system is specified by the 'bbox-crs' parameter.  For WGS 84 longitude/latitude the values are in most cases the sequence of minimum longitude, minimum latitude, maximum longitude and maximum latitude. However, in cases where the box spans the antimeridian the first value (west-most box edge) is larger than the third value (east-most box edge).
        :param str bbox_crs: The coordinate reference system of the specified bbox.
        :param int width: The number of samples wide to scale the requested coverage subset to.  This is an alternative to using the scaleSize parameter.
        :param int height: The number of samples high to scale the requested coverage subset to.  This is an alternative to using the scaleSize parameter.
        :param str f: A token indicating the content type to return.  Overrides the HTTP \"Accept\" header if present.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['collection_id', 'subset', 'scale_factor', 'scale_axes', 'scale_size', 'scale_extent', 'bbox', 'bbox_crs', 'width', 'height', 'f']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_id_coverage_domainset_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in local_var_params or
                local_var_params['collection_id'] is None):
            raise ApiValueError("Missing the required parameter `collection_id` when calling `collections_collection_id_coverage_domainset_get`")  # noqa: E501

        if 'scale_factor' in local_var_params and local_var_params['scale_factor'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `scale_factor` when calling `collections_collection_id_coverage_domainset_get`, must be a value greater than `0`")  # noqa: E501
        if ('bbox' in local_var_params and
                len(local_var_params['bbox']) > 6):
            raise ApiValueError("Invalid value for parameter `bbox` when calling `collections_collection_id_coverage_domainset_get`, number of items must be less than or equal to `6`")  # noqa: E501
        if ('bbox' in local_var_params and
                len(local_var_params['bbox']) < 4):
            raise ApiValueError("Invalid value for parameter `bbox` when calling `collections_collection_id_coverage_domainset_get`, number of items must be greater than or equal to `4`")  # noqa: E501
        if 'width' in local_var_params and local_var_params['width'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `width` when calling `collections_collection_id_coverage_domainset_get`, must be a value greater than or equal to `1`")  # noqa: E501
        if 'height' in local_var_params and local_var_params['height'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `height` when calling `collections_collection_id_coverage_domainset_get`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'collection_id' in local_var_params:
            path_params['collectionId'] = local_var_params['collection_id']  # noqa: E501

        query_params = []
        if 'subset' in local_var_params:
            query_params.append(('subset', local_var_params['subset']))  # noqa: E501
            collection_formats['subset'] = 'csv'  # noqa: E501
        if 'scale_factor' in local_var_params:
            query_params.append(('scale-factor', local_var_params['scale_factor']))  # noqa: E501
        if 'scale_axes' in local_var_params:
            query_params.append(('scale-axes', local_var_params['scale_axes']))  # noqa: E501
        if 'scale_size' in local_var_params:
            query_params.append(('scale-size', local_var_params['scale_size']))  # noqa: E501
        if 'scale_extent' in local_var_params:
            query_params.append(('scale-extent', local_var_params['scale_extent']))  # noqa: E501
        if 'bbox' in local_var_params:
            query_params.append(('bbox', local_var_params['bbox']))  # noqa: E501
            collection_formats['bbox'] = 'csv'  # noqa: E501
        if 'bbox_crs' in local_var_params:
            query_params.append(('bbox-crs', local_var_params['bbox_crs']))  # noqa: E501
        if 'width' in local_var_params:
            query_params.append(('width', local_var_params['width']))  # noqa: E501
        if 'height' in local_var_params:
            query_params.append(('height', local_var_params['height']))  # noqa: E501
        if 'f' in local_var_params:
            query_params.append(('f', local_var_params['f']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/html', 'application/problem+json', 'text/xml', ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cwApiKeyHeader', 'cwApiKeyQuery', 'cwAuth', 'httpBearer', 'oauth2', 'openIdConnect', 'openIdConnect1']  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collectionId}/coverage/domainset', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_id_coverage_get(self, collection_id, **kwargs):  # noqa: E501
        """The coverage of a collection.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_id_coverage_get(collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_id: The identifier of a collection in this data store. (required)
        :param list[str] subset: Specifies a subset of the coverage along one or more axes.  See the \"OGC API - Coverages - Part 1: Core\" specification for a description of the syntax.
        :param float scale_factor: A scale factor to be applied to all coverage axes.  A value of 1 leaves the coverage unscaled, a value between 0 and 1 scales down (reduces target domain), and a value greater than 1 scales up (enlarges target domain).
        :param str scale_axes: See Requirement 20 of the \"OGC® Web Coverage Service Interface Standard - Scaling Extension\" (OGC 12-039).
        :param str scale_size: See Requirement 21 of the \"OGC® Web Coverage Service Interface Standard - Scaling Extension\" (OGC 12-039).
        :param str scale_extent: See Requirement 22 of the \"OGC® Web Coverage Service Interface Standard - Scaling Extension\" (OGC 12-039).
        :param list[float] bbox: Specifies a subset of the coverage using a bounding box (as an alternative to using the subset parameter). The bounding box is provided as four or six numbers, depending on whether the coordinate reference system includes a vertical axis (elevation or depth):  * Lower left corner, coordinate axis 1 * Lower left corner, coordinate axis 2 * Lower left corner, coordinate axis 3 (optional) * Upper right corner, coordinate axis 1 * Upper right corner, coordinate axis 2 * Upper right corner, coordinate axis 3 (optional)  The coordinate reference system of the values is WGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate reference system is specified by the 'bbox-crs' parameter.  For WGS 84 longitude/latitude the values are in most cases the sequence of minimum longitude, minimum latitude, maximum longitude and maximum latitude. However, in cases where the box spans the antimeridian the first value (west-most box edge) is larger than the third value (east-most box edge).
        :param str bbox_crs: The coordinate reference system of the specified bbox.
        :param int width: The number of samples wide to scale the requested coverage subset to.  This is an alternative to using the scaleSize parameter.
        :param int height: The number of samples high to scale the requested coverage subset to.  This is an alternative to using the scaleSize parameter.
        :param list[str] transform: Specifies one or more transformations to apply.  See the CubeWerx Suite product documentation for details.
        :param str alpha_channel: Whether or not the GeoTIFF should include an alpha channel (as apposed to a GDAL NODATA tag) to indicate areas of no data.  The default value depends on the type of the coverage.  For numeric types, the NODATA tag is well-defined and interoperable, and is likely what most coverage clients will expect, so a default value of false will be used.  For color types, however, the NODATA tag is ill-defined and not interoperable, so a default value of true will be used.
        :param str response_handler: If this parameter is present, the client will receive an immediate acknowledgement response (with an HTTP status of 202), and the preparation of the coverage will be performed offline.  When the coverage is ready (or if an error occurs), the client will be informed via the specified response handler.  This provides the ability to request a coverage that would normally be too large or take too long to be handled within the confines of an HTTP request.  Currently the only supported response handler scheme is \"mailto:\" (e.g., \"mailto:me@myaddress.com\".
        :param str f: A token indicating the content type to return.  Overrides the HTTP \"Accept\" header if present.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_id_coverage_get_with_http_info(collection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_id_coverage_get_with_http_info(collection_id, **kwargs)  # noqa: E501
            return data

    def collections_collection_id_coverage_get_with_http_info(self, collection_id, **kwargs):  # noqa: E501
        """The coverage of a collection.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_id_coverage_get_with_http_info(collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_id: The identifier of a collection in this data store. (required)
        :param list[str] subset: Specifies a subset of the coverage along one or more axes.  See the \"OGC API - Coverages - Part 1: Core\" specification for a description of the syntax.
        :param float scale_factor: A scale factor to be applied to all coverage axes.  A value of 1 leaves the coverage unscaled, a value between 0 and 1 scales down (reduces target domain), and a value greater than 1 scales up (enlarges target domain).
        :param str scale_axes: See Requirement 20 of the \"OGC® Web Coverage Service Interface Standard - Scaling Extension\" (OGC 12-039).
        :param str scale_size: See Requirement 21 of the \"OGC® Web Coverage Service Interface Standard - Scaling Extension\" (OGC 12-039).
        :param str scale_extent: See Requirement 22 of the \"OGC® Web Coverage Service Interface Standard - Scaling Extension\" (OGC 12-039).
        :param list[float] bbox: Specifies a subset of the coverage using a bounding box (as an alternative to using the subset parameter). The bounding box is provided as four or six numbers, depending on whether the coordinate reference system includes a vertical axis (elevation or depth):  * Lower left corner, coordinate axis 1 * Lower left corner, coordinate axis 2 * Lower left corner, coordinate axis 3 (optional) * Upper right corner, coordinate axis 1 * Upper right corner, coordinate axis 2 * Upper right corner, coordinate axis 3 (optional)  The coordinate reference system of the values is WGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate reference system is specified by the 'bbox-crs' parameter.  For WGS 84 longitude/latitude the values are in most cases the sequence of minimum longitude, minimum latitude, maximum longitude and maximum latitude. However, in cases where the box spans the antimeridian the first value (west-most box edge) is larger than the third value (east-most box edge).
        :param str bbox_crs: The coordinate reference system of the specified bbox.
        :param int width: The number of samples wide to scale the requested coverage subset to.  This is an alternative to using the scaleSize parameter.
        :param int height: The number of samples high to scale the requested coverage subset to.  This is an alternative to using the scaleSize parameter.
        :param list[str] transform: Specifies one or more transformations to apply.  See the CubeWerx Suite product documentation for details.
        :param str alpha_channel: Whether or not the GeoTIFF should include an alpha channel (as apposed to a GDAL NODATA tag) to indicate areas of no data.  The default value depends on the type of the coverage.  For numeric types, the NODATA tag is well-defined and interoperable, and is likely what most coverage clients will expect, so a default value of false will be used.  For color types, however, the NODATA tag is ill-defined and not interoperable, so a default value of true will be used.
        :param str response_handler: If this parameter is present, the client will receive an immediate acknowledgement response (with an HTTP status of 202), and the preparation of the coverage will be performed offline.  When the coverage is ready (or if an error occurs), the client will be informed via the specified response handler.  This provides the ability to request a coverage that would normally be too large or take too long to be handled within the confines of an HTTP request.  Currently the only supported response handler scheme is \"mailto:\" (e.g., \"mailto:me@myaddress.com\".
        :param str f: A token indicating the content type to return.  Overrides the HTTP \"Accept\" header if present.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['collection_id', 'subset', 'scale_factor', 'scale_axes', 'scale_size', 'scale_extent', 'bbox', 'bbox_crs', 'width', 'height', 'transform', 'alpha_channel', 'response_handler', 'f']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_id_coverage_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in local_var_params or
                local_var_params['collection_id'] is None):
            raise ApiValueError("Missing the required parameter `collection_id` when calling `collections_collection_id_coverage_get`")  # noqa: E501

        if 'scale_factor' in local_var_params and local_var_params['scale_factor'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `scale_factor` when calling `collections_collection_id_coverage_get`, must be a value greater than `0`")  # noqa: E501
        if ('bbox' in local_var_params and
                len(local_var_params['bbox']) > 6):
            raise ApiValueError("Invalid value for parameter `bbox` when calling `collections_collection_id_coverage_get`, number of items must be less than or equal to `6`")  # noqa: E501
        if ('bbox' in local_var_params and
                len(local_var_params['bbox']) < 4):
            raise ApiValueError("Invalid value for parameter `bbox` when calling `collections_collection_id_coverage_get`, number of items must be greater than or equal to `4`")  # noqa: E501
        if 'width' in local_var_params and local_var_params['width'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `width` when calling `collections_collection_id_coverage_get`, must be a value greater than or equal to `1`")  # noqa: E501
        if 'height' in local_var_params and local_var_params['height'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `height` when calling `collections_collection_id_coverage_get`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'collection_id' in local_var_params:
            path_params['collectionId'] = local_var_params['collection_id']  # noqa: E501

        query_params = []
        if 'subset' in local_var_params:
            query_params.append(('subset', local_var_params['subset']))  # noqa: E501
            collection_formats['subset'] = 'csv'  # noqa: E501
        if 'scale_factor' in local_var_params:
            query_params.append(('scale-factor', local_var_params['scale_factor']))  # noqa: E501
        if 'scale_axes' in local_var_params:
            query_params.append(('scale-axes', local_var_params['scale_axes']))  # noqa: E501
        if 'scale_size' in local_var_params:
            query_params.append(('scale-size', local_var_params['scale_size']))  # noqa: E501
        if 'scale_extent' in local_var_params:
            query_params.append(('scale-extent', local_var_params['scale_extent']))  # noqa: E501
        if 'bbox' in local_var_params:
            query_params.append(('bbox', local_var_params['bbox']))  # noqa: E501
            collection_formats['bbox'] = 'csv'  # noqa: E501
        if 'bbox_crs' in local_var_params:
            query_params.append(('bbox-crs', local_var_params['bbox_crs']))  # noqa: E501
        if 'width' in local_var_params:
            query_params.append(('width', local_var_params['width']))  # noqa: E501
        if 'height' in local_var_params:
            query_params.append(('height', local_var_params['height']))  # noqa: E501
        if 'transform' in local_var_params:
            query_params.append(('transform', local_var_params['transform']))  # noqa: E501
            collection_formats['transform'] = 'csv'  # noqa: E501
        if 'alpha_channel' in local_var_params:
            query_params.append(('alphaChannel', local_var_params['alpha_channel']))  # noqa: E501
        if 'response_handler' in local_var_params:
            query_params.append(('responseHandler', local_var_params['response_handler']))  # noqa: E501
        if 'f' in local_var_params:
            query_params.append(('f', local_var_params['f']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/geo+tiff', 'text/html', 'application/problem+json', 'text/xml', 'application/json', ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cwApiKeyHeader', 'cwApiKeyQuery', 'cwAuth', 'httpBearer', 'oauth2', 'openIdConnect', 'openIdConnect1']  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collectionId}/coverage', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_id_coverage_rangetype_get(self, collection_id, **kwargs):  # noqa: E501
        """The range type of the coverage of a collection.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_id_coverage_rangetype_get(collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_id: The identifier of a collection in this data store. (required)
        :param list[str] subset: Specifies a subset of the coverage along one or more axes.  See the \"OGC API - Coverages - Part 1: Core\" specification for a description of the syntax.
        :param float scale_factor: A scale factor to be applied to all coverage axes.  A value of 1 leaves the coverage unscaled, a value between 0 and 1 scales down (reduces target domain), and a value greater than 1 scales up (enlarges target domain).
        :param str scale_axes: See Requirement 20 of the \"OGC® Web Coverage Service Interface Standard - Scaling Extension\" (OGC 12-039).
        :param str scale_size: See Requirement 21 of the \"OGC® Web Coverage Service Interface Standard - Scaling Extension\" (OGC 12-039).
        :param str scale_extent: See Requirement 22 of the \"OGC® Web Coverage Service Interface Standard - Scaling Extension\" (OGC 12-039).
        :param list[float] bbox: Specifies a subset of the coverage using a bounding box (as an alternative to using the subset parameter). The bounding box is provided as four or six numbers, depending on whether the coordinate reference system includes a vertical axis (elevation or depth):  * Lower left corner, coordinate axis 1 * Lower left corner, coordinate axis 2 * Lower left corner, coordinate axis 3 (optional) * Upper right corner, coordinate axis 1 * Upper right corner, coordinate axis 2 * Upper right corner, coordinate axis 3 (optional)  The coordinate reference system of the values is WGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate reference system is specified by the 'bbox-crs' parameter.  For WGS 84 longitude/latitude the values are in most cases the sequence of minimum longitude, minimum latitude, maximum longitude and maximum latitude. However, in cases where the box spans the antimeridian the first value (west-most box edge) is larger than the third value (east-most box edge).
        :param str bbox_crs: The coordinate reference system of the specified bbox.
        :param int width: The number of samples wide to scale the requested coverage subset to.  This is an alternative to using the scaleSize parameter.
        :param int height: The number of samples high to scale the requested coverage subset to.  This is an alternative to using the scaleSize parameter.
        :param str f: A token indicating the content type to return.  Overrides the HTTP \"Accept\" header if present.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_id_coverage_rangetype_get_with_http_info(collection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_id_coverage_rangetype_get_with_http_info(collection_id, **kwargs)  # noqa: E501
            return data

    def collections_collection_id_coverage_rangetype_get_with_http_info(self, collection_id, **kwargs):  # noqa: E501
        """The range type of the coverage of a collection.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_id_coverage_rangetype_get_with_http_info(collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_id: The identifier of a collection in this data store. (required)
        :param list[str] subset: Specifies a subset of the coverage along one or more axes.  See the \"OGC API - Coverages - Part 1: Core\" specification for a description of the syntax.
        :param float scale_factor: A scale factor to be applied to all coverage axes.  A value of 1 leaves the coverage unscaled, a value between 0 and 1 scales down (reduces target domain), and a value greater than 1 scales up (enlarges target domain).
        :param str scale_axes: See Requirement 20 of the \"OGC® Web Coverage Service Interface Standard - Scaling Extension\" (OGC 12-039).
        :param str scale_size: See Requirement 21 of the \"OGC® Web Coverage Service Interface Standard - Scaling Extension\" (OGC 12-039).
        :param str scale_extent: See Requirement 22 of the \"OGC® Web Coverage Service Interface Standard - Scaling Extension\" (OGC 12-039).
        :param list[float] bbox: Specifies a subset of the coverage using a bounding box (as an alternative to using the subset parameter). The bounding box is provided as four or six numbers, depending on whether the coordinate reference system includes a vertical axis (elevation or depth):  * Lower left corner, coordinate axis 1 * Lower left corner, coordinate axis 2 * Lower left corner, coordinate axis 3 (optional) * Upper right corner, coordinate axis 1 * Upper right corner, coordinate axis 2 * Upper right corner, coordinate axis 3 (optional)  The coordinate reference system of the values is WGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate reference system is specified by the 'bbox-crs' parameter.  For WGS 84 longitude/latitude the values are in most cases the sequence of minimum longitude, minimum latitude, maximum longitude and maximum latitude. However, in cases where the box spans the antimeridian the first value (west-most box edge) is larger than the third value (east-most box edge).
        :param str bbox_crs: The coordinate reference system of the specified bbox.
        :param int width: The number of samples wide to scale the requested coverage subset to.  This is an alternative to using the scaleSize parameter.
        :param int height: The number of samples high to scale the requested coverage subset to.  This is an alternative to using the scaleSize parameter.
        :param str f: A token indicating the content type to return.  Overrides the HTTP \"Accept\" header if present.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['collection_id', 'subset', 'scale_factor', 'scale_axes', 'scale_size', 'scale_extent', 'bbox', 'bbox_crs', 'width', 'height', 'f']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_id_coverage_rangetype_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in local_var_params or
                local_var_params['collection_id'] is None):
            raise ApiValueError("Missing the required parameter `collection_id` when calling `collections_collection_id_coverage_rangetype_get`")  # noqa: E501

        if 'scale_factor' in local_var_params and local_var_params['scale_factor'] <= 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `scale_factor` when calling `collections_collection_id_coverage_rangetype_get`, must be a value greater than `0`")  # noqa: E501
        if ('bbox' in local_var_params and
                len(local_var_params['bbox']) > 6):
            raise ApiValueError("Invalid value for parameter `bbox` when calling `collections_collection_id_coverage_rangetype_get`, number of items must be less than or equal to `6`")  # noqa: E501
        if ('bbox' in local_var_params and
                len(local_var_params['bbox']) < 4):
            raise ApiValueError("Invalid value for parameter `bbox` when calling `collections_collection_id_coverage_rangetype_get`, number of items must be greater than or equal to `4`")  # noqa: E501
        if 'width' in local_var_params and local_var_params['width'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `width` when calling `collections_collection_id_coverage_rangetype_get`, must be a value greater than or equal to `1`")  # noqa: E501
        if 'height' in local_var_params and local_var_params['height'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `height` when calling `collections_collection_id_coverage_rangetype_get`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'collection_id' in local_var_params:
            path_params['collectionId'] = local_var_params['collection_id']  # noqa: E501

        query_params = []
        if 'subset' in local_var_params:
            query_params.append(('subset', local_var_params['subset']))  # noqa: E501
            collection_formats['subset'] = 'csv'  # noqa: E501
        if 'scale_factor' in local_var_params:
            query_params.append(('scale-factor', local_var_params['scale_factor']))  # noqa: E501
        if 'scale_axes' in local_var_params:
            query_params.append(('scale-axes', local_var_params['scale_axes']))  # noqa: E501
        if 'scale_size' in local_var_params:
            query_params.append(('scale-size', local_var_params['scale_size']))  # noqa: E501
        if 'scale_extent' in local_var_params:
            query_params.append(('scale-extent', local_var_params['scale_extent']))  # noqa: E501
        if 'bbox' in local_var_params:
            query_params.append(('bbox', local_var_params['bbox']))  # noqa: E501
            collection_formats['bbox'] = 'csv'  # noqa: E501
        if 'bbox_crs' in local_var_params:
            query_params.append(('bbox-crs', local_var_params['bbox_crs']))  # noqa: E501
        if 'width' in local_var_params:
            query_params.append(('width', local_var_params['width']))  # noqa: E501
        if 'height' in local_var_params:
            query_params.append(('height', local_var_params['height']))  # noqa: E501
        if 'f' in local_var_params:
            query_params.append(('f', local_var_params['f']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/html', 'application/problem+json', 'text/xml', ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cwApiKeyHeader', 'cwApiKeyQuery', 'cwAuth', 'httpBearer', 'oauth2', 'openIdConnect', 'openIdConnect1']  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collectionId}/coverage/rangetype', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
