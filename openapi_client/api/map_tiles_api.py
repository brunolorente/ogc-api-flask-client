# coding: utf-8

"""
    Daraa

    This data store is offered by CubeWerx Inc. as a demonstration of its in-progress OGC API implementation.  # noqa: E501

    The version of the OpenAPI document: 9.3.45
    Contact: mgalluch@cubewerx.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (
    ApiTypeError,
    ApiValueError
)


class MapTilesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def collections_collection_id_map_tiles_get(self, collection_id, **kwargs):  # noqa: E501
        """A metadata document describing the map tilesets that are available for the specified collection.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_id_map_tiles_get(collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_id: The identifier of a collection in this data store. (required)
        :param str style_id: The identifier of a style in this data store that's compatible with the specified collection.  If no styleId parameter is present, the default style of the collection will be rendered.
        :param str f: A token indicating the content type to return.  Overrides the HTTP \"Accept\" header if present.
        :param bool pretty: Whether or not the output should be pretty-formatted (with whitespace, etc.).
        :return: Tilesets
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_id_map_tiles_get_with_http_info(collection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_id_map_tiles_get_with_http_info(collection_id, **kwargs)  # noqa: E501
            return data

    def collections_collection_id_map_tiles_get_with_http_info(self, collection_id, **kwargs):  # noqa: E501
        """A metadata document describing the map tilesets that are available for the specified collection.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_id_map_tiles_get_with_http_info(collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_id: The identifier of a collection in this data store. (required)
        :param str style_id: The identifier of a style in this data store that's compatible with the specified collection.  If no styleId parameter is present, the default style of the collection will be rendered.
        :param str f: A token indicating the content type to return.  Overrides the HTTP \"Accept\" header if present.
        :param bool pretty: Whether or not the output should be pretty-formatted (with whitespace, etc.).
        :return: Tilesets
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['collection_id', 'style_id', 'f', 'pretty']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_id_map_tiles_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in local_var_params or
                local_var_params['collection_id'] is None):
            raise ApiValueError("Missing the required parameter `collection_id` when calling `collections_collection_id_map_tiles_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection_id' in local_var_params:
            path_params['collectionId'] = local_var_params['collection_id']  # noqa: E501

        query_params = []
        if 'style_id' in local_var_params:
            query_params.append(('styleId', local_var_params['style_id']))  # noqa: E501
        if 'f' in local_var_params:
            query_params.append(('f', local_var_params['f']))  # noqa: E501
        if 'pretty' in local_var_params:
            query_params.append(('pretty', local_var_params['pretty']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/html', 'application/problem+json', 'text/xml', ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cwApiKeyHeader', 'cwApiKeyQuery', 'cwAuth', 'httpBearer', 'oauth2', 'openIdConnect', 'openIdConnect1']  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collectionId}/map/tiles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Tilesets',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_id_map_tiles_tile_matrix_set_id_get(self, collection_id, tile_matrix_set_id, **kwargs):  # noqa: E501
        """A metadata document describing the map tiles that are available for the specified collection in the specified tile-matrix set.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_id_map_tiles_tile_matrix_set_id_get(collection_id, tile_matrix_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_id: The identifier of a collection in this data store. (required)
        :param str tile_matrix_set_id: The identifier of a tile-matrix set that this collection is available in. (required)
        :param str style_id: The identifier of a style in this data store that's compatible with the specified collection.  If no styleId parameter is present, the default style of the collection will be rendered.
        :param str f: A token indicating the content type to return.  Overrides the HTTP \"Accept\" header if present.
        :param bool pretty: Whether or not the output should be pretty-formatted (with whitespace, etc.).
        :return: Tileset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_id_map_tiles_tile_matrix_set_id_get_with_http_info(collection_id, tile_matrix_set_id, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_id_map_tiles_tile_matrix_set_id_get_with_http_info(collection_id, tile_matrix_set_id, **kwargs)  # noqa: E501
            return data

    def collections_collection_id_map_tiles_tile_matrix_set_id_get_with_http_info(self, collection_id, tile_matrix_set_id, **kwargs):  # noqa: E501
        """A metadata document describing the map tiles that are available for the specified collection in the specified tile-matrix set.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_id_map_tiles_tile_matrix_set_id_get_with_http_info(collection_id, tile_matrix_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_id: The identifier of a collection in this data store. (required)
        :param str tile_matrix_set_id: The identifier of a tile-matrix set that this collection is available in. (required)
        :param str style_id: The identifier of a style in this data store that's compatible with the specified collection.  If no styleId parameter is present, the default style of the collection will be rendered.
        :param str f: A token indicating the content type to return.  Overrides the HTTP \"Accept\" header if present.
        :param bool pretty: Whether or not the output should be pretty-formatted (with whitespace, etc.).
        :return: Tileset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['collection_id', 'tile_matrix_set_id', 'style_id', 'f', 'pretty']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_id_map_tiles_tile_matrix_set_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in local_var_params or
                local_var_params['collection_id'] is None):
            raise ApiValueError("Missing the required parameter `collection_id` when calling `collections_collection_id_map_tiles_tile_matrix_set_id_get`")  # noqa: E501
        # verify the required parameter 'tile_matrix_set_id' is set
        if ('tile_matrix_set_id' not in local_var_params or
                local_var_params['tile_matrix_set_id'] is None):
            raise ApiValueError("Missing the required parameter `tile_matrix_set_id` when calling `collections_collection_id_map_tiles_tile_matrix_set_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection_id' in local_var_params:
            path_params['collectionId'] = local_var_params['collection_id']  # noqa: E501
        if 'tile_matrix_set_id' in local_var_params:
            path_params['tileMatrixSetId'] = local_var_params['tile_matrix_set_id']  # noqa: E501

        query_params = []
        if 'style_id' in local_var_params:
            query_params.append(('styleId', local_var_params['style_id']))  # noqa: E501
        if 'f' in local_var_params:
            query_params.append(('f', local_var_params['f']))  # noqa: E501
        if 'pretty' in local_var_params:
            query_params.append(('pretty', local_var_params['pretty']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/html', 'application/problem+json', 'text/xml', ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cwApiKeyHeader', 'cwApiKeyQuery', 'cwAuth', 'httpBearer', 'oauth2', 'openIdConnect', 'openIdConnect1']  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collectionId}/map/tiles/{tileMatrixSetId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Tileset',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_id_map_tiles_tile_matrix_set_id_tile_matrix_legend_get(self, collection_id, tile_matrix_set_id, tile_matrix, **kwargs):  # noqa: E501
        """A legend image showing a graphical representation of the specified collection as it would appear in the corresponding map tiles of the specified zoom level.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_id_map_tiles_tile_matrix_set_id_tile_matrix_legend_get(collection_id, tile_matrix_set_id, tile_matrix, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_id: The identifier of a collection in this data store. (required)
        :param str tile_matrix_set_id: The identifier of a tile-matrix set that this collection is available in. (required)
        :param str tile_matrix: The identifier of a tile matrix (typically a zoom level) within the specified tile-matrix set. (required)
        :param str style_id: The identifier of a style in this data store that's compatible with the specified collection.  If no styleId parameter is present, the default style of the collection will be rendered.
        :param str f: A token indicating the content type to return.  Overrides the HTTP \"Accept\" header if present.
        :param bool pretty: Whether or not the output should be pretty-formatted (with whitespace, etc.).
        :return: Tileset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_id_map_tiles_tile_matrix_set_id_tile_matrix_legend_get_with_http_info(collection_id, tile_matrix_set_id, tile_matrix, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_id_map_tiles_tile_matrix_set_id_tile_matrix_legend_get_with_http_info(collection_id, tile_matrix_set_id, tile_matrix, **kwargs)  # noqa: E501
            return data

    def collections_collection_id_map_tiles_tile_matrix_set_id_tile_matrix_legend_get_with_http_info(self, collection_id, tile_matrix_set_id, tile_matrix, **kwargs):  # noqa: E501
        """A legend image showing a graphical representation of the specified collection as it would appear in the corresponding map tiles of the specified zoom level.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_id_map_tiles_tile_matrix_set_id_tile_matrix_legend_get_with_http_info(collection_id, tile_matrix_set_id, tile_matrix, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_id: The identifier of a collection in this data store. (required)
        :param str tile_matrix_set_id: The identifier of a tile-matrix set that this collection is available in. (required)
        :param str tile_matrix: The identifier of a tile matrix (typically a zoom level) within the specified tile-matrix set. (required)
        :param str style_id: The identifier of a style in this data store that's compatible with the specified collection.  If no styleId parameter is present, the default style of the collection will be rendered.
        :param str f: A token indicating the content type to return.  Overrides the HTTP \"Accept\" header if present.
        :param bool pretty: Whether or not the output should be pretty-formatted (with whitespace, etc.).
        :return: Tileset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['collection_id', 'tile_matrix_set_id', 'tile_matrix', 'style_id', 'f', 'pretty']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_id_map_tiles_tile_matrix_set_id_tile_matrix_legend_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in local_var_params or
                local_var_params['collection_id'] is None):
            raise ApiValueError("Missing the required parameter `collection_id` when calling `collections_collection_id_map_tiles_tile_matrix_set_id_tile_matrix_legend_get`")  # noqa: E501
        # verify the required parameter 'tile_matrix_set_id' is set
        if ('tile_matrix_set_id' not in local_var_params or
                local_var_params['tile_matrix_set_id'] is None):
            raise ApiValueError("Missing the required parameter `tile_matrix_set_id` when calling `collections_collection_id_map_tiles_tile_matrix_set_id_tile_matrix_legend_get`")  # noqa: E501
        # verify the required parameter 'tile_matrix' is set
        if ('tile_matrix' not in local_var_params or
                local_var_params['tile_matrix'] is None):
            raise ApiValueError("Missing the required parameter `tile_matrix` when calling `collections_collection_id_map_tiles_tile_matrix_set_id_tile_matrix_legend_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection_id' in local_var_params:
            path_params['collectionId'] = local_var_params['collection_id']  # noqa: E501
        if 'tile_matrix_set_id' in local_var_params:
            path_params['tileMatrixSetId'] = local_var_params['tile_matrix_set_id']  # noqa: E501
        if 'tile_matrix' in local_var_params:
            path_params['tileMatrix'] = local_var_params['tile_matrix']  # noqa: E501

        query_params = []
        if 'style_id' in local_var_params:
            query_params.append(('styleId', local_var_params['style_id']))  # noqa: E501
        if 'f' in local_var_params:
            query_params.append(('f', local_var_params['f']))  # noqa: E501
        if 'pretty' in local_var_params:
            query_params.append(('pretty', local_var_params['pretty']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/html', 'application/problem+json', 'text/xml', ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cwApiKeyHeader', 'cwApiKeyQuery', 'cwAuth', 'httpBearer', 'oauth2', 'openIdConnect', 'openIdConnect1']  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collectionId}/map/tiles/{tileMatrixSetId}/{tileMatrix}/legend', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Tileset',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_id_map_tiles_tile_matrix_set_id_tile_matrix_tile_row_tile_col_get(self, collection_id, tile_matrix_set_id, tile_matrix, tile_row, tile_col, **kwargs):  # noqa: E501
        """A map tile of the specified collection.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_id_map_tiles_tile_matrix_set_id_tile_matrix_tile_row_tile_col_get(collection_id, tile_matrix_set_id, tile_matrix, tile_row, tile_col, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_id: The identifier of a collection in this data store. (required)
        :param str tile_matrix_set_id: The identifier of a tile-matrix set that this collection is available in. (required)
        :param str tile_matrix: The identifier of a tile matrix (typically a zoom level) within the specified tile-matrix set. (required)
        :param int tile_row: The zero-based row index of the tile in the specified tile matrix. (required)
        :param int tile_col: The zero-based column index of the tile in the specified tile matrix. (required)
        :param str datetime: Either a date-time or an interval, open or closed. Date and time expressions adhere to RFC 3339.  Open intervals are expressed using double-dots.  Examples:  * A date-time: \"2018-02-12T23:20:50Z\" * A closed interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\" * Open intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"  Only elements that have a temporal property that intersects the value of `datetime` are selected.
        :param str style_id: The identifier of a style in this data store that's compatible with the specified collection.  If no styleId parameter is present, the default style of the collection will be rendered.
        :param bool transparent: Whether or not the background of the image should be transparent (when supported by the requested image format).
        :param str bgcolor: Hexadecimal red-green-blue color value for the background color.  If not specified, the background color specified by the style (0xFFFFFF by default) will be used.
        :param str f: A token indicating the content type to return.  Overrides the HTTP \"Accept\" header if present.  A value of \"jop\" (content type \"image/x-jpegorpng\") indicates that either JPEG or PNG should be returned, whichever the server deems to be most appropriate for this tile.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_id_map_tiles_tile_matrix_set_id_tile_matrix_tile_row_tile_col_get_with_http_info(collection_id, tile_matrix_set_id, tile_matrix, tile_row, tile_col, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_id_map_tiles_tile_matrix_set_id_tile_matrix_tile_row_tile_col_get_with_http_info(collection_id, tile_matrix_set_id, tile_matrix, tile_row, tile_col, **kwargs)  # noqa: E501
            return data

    def collections_collection_id_map_tiles_tile_matrix_set_id_tile_matrix_tile_row_tile_col_get_with_http_info(self, collection_id, tile_matrix_set_id, tile_matrix, tile_row, tile_col, **kwargs):  # noqa: E501
        """A map tile of the specified collection.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_id_map_tiles_tile_matrix_set_id_tile_matrix_tile_row_tile_col_get_with_http_info(collection_id, tile_matrix_set_id, tile_matrix, tile_row, tile_col, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_id: The identifier of a collection in this data store. (required)
        :param str tile_matrix_set_id: The identifier of a tile-matrix set that this collection is available in. (required)
        :param str tile_matrix: The identifier of a tile matrix (typically a zoom level) within the specified tile-matrix set. (required)
        :param int tile_row: The zero-based row index of the tile in the specified tile matrix. (required)
        :param int tile_col: The zero-based column index of the tile in the specified tile matrix. (required)
        :param str datetime: Either a date-time or an interval, open or closed. Date and time expressions adhere to RFC 3339.  Open intervals are expressed using double-dots.  Examples:  * A date-time: \"2018-02-12T23:20:50Z\" * A closed interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\" * Open intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"  Only elements that have a temporal property that intersects the value of `datetime` are selected.
        :param str style_id: The identifier of a style in this data store that's compatible with the specified collection.  If no styleId parameter is present, the default style of the collection will be rendered.
        :param bool transparent: Whether or not the background of the image should be transparent (when supported by the requested image format).
        :param str bgcolor: Hexadecimal red-green-blue color value for the background color.  If not specified, the background color specified by the style (0xFFFFFF by default) will be used.
        :param str f: A token indicating the content type to return.  Overrides the HTTP \"Accept\" header if present.  A value of \"jop\" (content type \"image/x-jpegorpng\") indicates that either JPEG or PNG should be returned, whichever the server deems to be most appropriate for this tile.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['collection_id', 'tile_matrix_set_id', 'tile_matrix', 'tile_row', 'tile_col', 'datetime', 'style_id', 'transparent', 'bgcolor', 'f']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_id_map_tiles_tile_matrix_set_id_tile_matrix_tile_row_tile_col_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in local_var_params or
                local_var_params['collection_id'] is None):
            raise ApiValueError("Missing the required parameter `collection_id` when calling `collections_collection_id_map_tiles_tile_matrix_set_id_tile_matrix_tile_row_tile_col_get`")  # noqa: E501
        # verify the required parameter 'tile_matrix_set_id' is set
        if ('tile_matrix_set_id' not in local_var_params or
                local_var_params['tile_matrix_set_id'] is None):
            raise ApiValueError("Missing the required parameter `tile_matrix_set_id` when calling `collections_collection_id_map_tiles_tile_matrix_set_id_tile_matrix_tile_row_tile_col_get`")  # noqa: E501
        # verify the required parameter 'tile_matrix' is set
        if ('tile_matrix' not in local_var_params or
                local_var_params['tile_matrix'] is None):
            raise ApiValueError("Missing the required parameter `tile_matrix` when calling `collections_collection_id_map_tiles_tile_matrix_set_id_tile_matrix_tile_row_tile_col_get`")  # noqa: E501
        # verify the required parameter 'tile_row' is set
        if ('tile_row' not in local_var_params or
                local_var_params['tile_row'] is None):
            raise ApiValueError("Missing the required parameter `tile_row` when calling `collections_collection_id_map_tiles_tile_matrix_set_id_tile_matrix_tile_row_tile_col_get`")  # noqa: E501
        # verify the required parameter 'tile_col' is set
        if ('tile_col' not in local_var_params or
                local_var_params['tile_col'] is None):
            raise ApiValueError("Missing the required parameter `tile_col` when calling `collections_collection_id_map_tiles_tile_matrix_set_id_tile_matrix_tile_row_tile_col_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection_id' in local_var_params:
            path_params['collectionId'] = local_var_params['collection_id']  # noqa: E501
        if 'tile_matrix_set_id' in local_var_params:
            path_params['tileMatrixSetId'] = local_var_params['tile_matrix_set_id']  # noqa: E501
        if 'tile_matrix' in local_var_params:
            path_params['tileMatrix'] = local_var_params['tile_matrix']  # noqa: E501
        if 'tile_row' in local_var_params:
            path_params['tileRow'] = local_var_params['tile_row']  # noqa: E501
        if 'tile_col' in local_var_params:
            path_params['tileCol'] = local_var_params['tile_col']  # noqa: E501

        query_params = []
        if 'datetime' in local_var_params:
            query_params.append(('datetime', local_var_params['datetime']))  # noqa: E501
        if 'style_id' in local_var_params:
            query_params.append(('styleId', local_var_params['style_id']))  # noqa: E501
        if 'transparent' in local_var_params:
            query_params.append(('transparent', local_var_params['transparent']))  # noqa: E501
        if 'bgcolor' in local_var_params:
            query_params.append(('bgcolor', local_var_params['bgcolor']))  # noqa: E501
        if 'f' in local_var_params:
            query_params.append(('f', local_var_params['f']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/x-jpegorpng', 'image/jpeg', 'image/png', 'image/gif', 'application/x-cubewerx-wkb', 'application/problem+json', 'text/xml', 'text/html', 'application/json', ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cwApiKeyHeader', 'cwApiKeyQuery', 'cwAuth', 'httpBearer', 'oauth2', 'openIdConnect', 'openIdConnect1']  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collectionId}/map/tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_id_styles_style_id_map_tiles_get(self, collection_id, style_id, **kwargs):  # noqa: E501
        """A metadata document describing the map tiles that are available for the specified collection in the specified style.  (Note: The output of this endpoint is likely changing.)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_id_styles_style_id_map_tiles_get(collection_id, style_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_id: The identifier of a collection in this data store. (required)
        :param str style_id: The identifier of a style in this data store that's compatible with the specified collection. (required)
        :param str f: A token indicating the content type to return.  Overrides the HTTP \"Accept\" header if present.
        :param bool pretty: Whether or not the output should be pretty-formatted (with whitespace, etc.).
        :return: Tilesets
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_id_styles_style_id_map_tiles_get_with_http_info(collection_id, style_id, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_id_styles_style_id_map_tiles_get_with_http_info(collection_id, style_id, **kwargs)  # noqa: E501
            return data

    def collections_collection_id_styles_style_id_map_tiles_get_with_http_info(self, collection_id, style_id, **kwargs):  # noqa: E501
        """A metadata document describing the map tiles that are available for the specified collection in the specified style.  (Note: The output of this endpoint is likely changing.)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_id_styles_style_id_map_tiles_get_with_http_info(collection_id, style_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_id: The identifier of a collection in this data store. (required)
        :param str style_id: The identifier of a style in this data store that's compatible with the specified collection. (required)
        :param str f: A token indicating the content type to return.  Overrides the HTTP \"Accept\" header if present.
        :param bool pretty: Whether or not the output should be pretty-formatted (with whitespace, etc.).
        :return: Tilesets
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['collection_id', 'style_id', 'f', 'pretty']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_id_styles_style_id_map_tiles_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in local_var_params or
                local_var_params['collection_id'] is None):
            raise ApiValueError("Missing the required parameter `collection_id` when calling `collections_collection_id_styles_style_id_map_tiles_get`")  # noqa: E501
        # verify the required parameter 'style_id' is set
        if ('style_id' not in local_var_params or
                local_var_params['style_id'] is None):
            raise ApiValueError("Missing the required parameter `style_id` when calling `collections_collection_id_styles_style_id_map_tiles_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection_id' in local_var_params:
            path_params['collectionId'] = local_var_params['collection_id']  # noqa: E501
        if 'style_id' in local_var_params:
            path_params['styleId'] = local_var_params['style_id']  # noqa: E501

        query_params = []
        if 'f' in local_var_params:
            query_params.append(('f', local_var_params['f']))  # noqa: E501
        if 'pretty' in local_var_params:
            query_params.append(('pretty', local_var_params['pretty']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/html', 'application/problem+json', 'text/xml', ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cwApiKeyHeader', 'cwApiKeyQuery', 'cwAuth', 'httpBearer', 'oauth2', 'openIdConnect', 'openIdConnect1']  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collectionId}/styles/{styleId}/map/tiles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Tilesets',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_id_styles_style_id_map_tiles_tile_matrix_set_id_get(self, collection_id, style_id, tile_matrix_set_id, **kwargs):  # noqa: E501
        """A metadata document describing the map tiles that are available for the specified collection in the specified tile-matrix set in the specified style.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_id_styles_style_id_map_tiles_tile_matrix_set_id_get(collection_id, style_id, tile_matrix_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_id: The identifier of a collection in this data store. (required)
        :param str style_id: The identifier of a style in this data store that's compatible with the specified collection. (required)
        :param str tile_matrix_set_id: The identifier of a tile-matrix set that this collection is available in. (required)
        :param str f: A token indicating the content type to return.  Overrides the HTTP \"Accept\" header if present.
        :param bool pretty: Whether or not the output should be pretty-formatted (with whitespace, etc.).
        :return: Tileset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_id_styles_style_id_map_tiles_tile_matrix_set_id_get_with_http_info(collection_id, style_id, tile_matrix_set_id, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_id_styles_style_id_map_tiles_tile_matrix_set_id_get_with_http_info(collection_id, style_id, tile_matrix_set_id, **kwargs)  # noqa: E501
            return data

    def collections_collection_id_styles_style_id_map_tiles_tile_matrix_set_id_get_with_http_info(self, collection_id, style_id, tile_matrix_set_id, **kwargs):  # noqa: E501
        """A metadata document describing the map tiles that are available for the specified collection in the specified tile-matrix set in the specified style.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_id_styles_style_id_map_tiles_tile_matrix_set_id_get_with_http_info(collection_id, style_id, tile_matrix_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_id: The identifier of a collection in this data store. (required)
        :param str style_id: The identifier of a style in this data store that's compatible with the specified collection. (required)
        :param str tile_matrix_set_id: The identifier of a tile-matrix set that this collection is available in. (required)
        :param str f: A token indicating the content type to return.  Overrides the HTTP \"Accept\" header if present.
        :param bool pretty: Whether or not the output should be pretty-formatted (with whitespace, etc.).
        :return: Tileset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['collection_id', 'style_id', 'tile_matrix_set_id', 'f', 'pretty']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_id_styles_style_id_map_tiles_tile_matrix_set_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in local_var_params or
                local_var_params['collection_id'] is None):
            raise ApiValueError("Missing the required parameter `collection_id` when calling `collections_collection_id_styles_style_id_map_tiles_tile_matrix_set_id_get`")  # noqa: E501
        # verify the required parameter 'style_id' is set
        if ('style_id' not in local_var_params or
                local_var_params['style_id'] is None):
            raise ApiValueError("Missing the required parameter `style_id` when calling `collections_collection_id_styles_style_id_map_tiles_tile_matrix_set_id_get`")  # noqa: E501
        # verify the required parameter 'tile_matrix_set_id' is set
        if ('tile_matrix_set_id' not in local_var_params or
                local_var_params['tile_matrix_set_id'] is None):
            raise ApiValueError("Missing the required parameter `tile_matrix_set_id` when calling `collections_collection_id_styles_style_id_map_tiles_tile_matrix_set_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection_id' in local_var_params:
            path_params['collectionId'] = local_var_params['collection_id']  # noqa: E501
        if 'style_id' in local_var_params:
            path_params['styleId'] = local_var_params['style_id']  # noqa: E501
        if 'tile_matrix_set_id' in local_var_params:
            path_params['tileMatrixSetId'] = local_var_params['tile_matrix_set_id']  # noqa: E501

        query_params = []
        if 'f' in local_var_params:
            query_params.append(('f', local_var_params['f']))  # noqa: E501
        if 'pretty' in local_var_params:
            query_params.append(('pretty', local_var_params['pretty']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/html', 'application/problem+json', 'text/xml', ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cwApiKeyHeader', 'cwApiKeyQuery', 'cwAuth', 'httpBearer', 'oauth2', 'openIdConnect', 'openIdConnect1']  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collectionId}/styles/{styleId}/map/tiles/{tileMatrixSetId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Tileset',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_id_styles_style_id_map_tiles_tile_matrix_set_id_tile_matrix_legend_get(self, collection_id, style_id, tile_matrix_set_id, tile_matrix, **kwargs):  # noqa: E501
        """A legend image showing a graphical representation of the specified collection as it would appear in the corresponding map tiles of the specified zoom level in the specified style.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_id_styles_style_id_map_tiles_tile_matrix_set_id_tile_matrix_legend_get(collection_id, style_id, tile_matrix_set_id, tile_matrix, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_id: The identifier of a collection in this data store. (required)
        :param str style_id: The identifier of a style in this data store that's compatible with the specified collection. (required)
        :param str tile_matrix_set_id: The identifier of a tile-matrix set that this collection is available in. (required)
        :param str tile_matrix: The identifier of a tile matrix (typically a zoom level) within the specified tile-matrix set. (required)
        :param str f: A token indicating the content type to return.  Overrides the HTTP \"Accept\" header if present.
        :param bool pretty: Whether or not the output should be pretty-formatted (with whitespace, etc.).
        :return: Tileset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_id_styles_style_id_map_tiles_tile_matrix_set_id_tile_matrix_legend_get_with_http_info(collection_id, style_id, tile_matrix_set_id, tile_matrix, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_id_styles_style_id_map_tiles_tile_matrix_set_id_tile_matrix_legend_get_with_http_info(collection_id, style_id, tile_matrix_set_id, tile_matrix, **kwargs)  # noqa: E501
            return data

    def collections_collection_id_styles_style_id_map_tiles_tile_matrix_set_id_tile_matrix_legend_get_with_http_info(self, collection_id, style_id, tile_matrix_set_id, tile_matrix, **kwargs):  # noqa: E501
        """A legend image showing a graphical representation of the specified collection as it would appear in the corresponding map tiles of the specified zoom level in the specified style.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_id_styles_style_id_map_tiles_tile_matrix_set_id_tile_matrix_legend_get_with_http_info(collection_id, style_id, tile_matrix_set_id, tile_matrix, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_id: The identifier of a collection in this data store. (required)
        :param str style_id: The identifier of a style in this data store that's compatible with the specified collection. (required)
        :param str tile_matrix_set_id: The identifier of a tile-matrix set that this collection is available in. (required)
        :param str tile_matrix: The identifier of a tile matrix (typically a zoom level) within the specified tile-matrix set. (required)
        :param str f: A token indicating the content type to return.  Overrides the HTTP \"Accept\" header if present.
        :param bool pretty: Whether or not the output should be pretty-formatted (with whitespace, etc.).
        :return: Tileset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['collection_id', 'style_id', 'tile_matrix_set_id', 'tile_matrix', 'f', 'pretty']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_id_styles_style_id_map_tiles_tile_matrix_set_id_tile_matrix_legend_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in local_var_params or
                local_var_params['collection_id'] is None):
            raise ApiValueError("Missing the required parameter `collection_id` when calling `collections_collection_id_styles_style_id_map_tiles_tile_matrix_set_id_tile_matrix_legend_get`")  # noqa: E501
        # verify the required parameter 'style_id' is set
        if ('style_id' not in local_var_params or
                local_var_params['style_id'] is None):
            raise ApiValueError("Missing the required parameter `style_id` when calling `collections_collection_id_styles_style_id_map_tiles_tile_matrix_set_id_tile_matrix_legend_get`")  # noqa: E501
        # verify the required parameter 'tile_matrix_set_id' is set
        if ('tile_matrix_set_id' not in local_var_params or
                local_var_params['tile_matrix_set_id'] is None):
            raise ApiValueError("Missing the required parameter `tile_matrix_set_id` when calling `collections_collection_id_styles_style_id_map_tiles_tile_matrix_set_id_tile_matrix_legend_get`")  # noqa: E501
        # verify the required parameter 'tile_matrix' is set
        if ('tile_matrix' not in local_var_params or
                local_var_params['tile_matrix'] is None):
            raise ApiValueError("Missing the required parameter `tile_matrix` when calling `collections_collection_id_styles_style_id_map_tiles_tile_matrix_set_id_tile_matrix_legend_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection_id' in local_var_params:
            path_params['collectionId'] = local_var_params['collection_id']  # noqa: E501
        if 'style_id' in local_var_params:
            path_params['styleId'] = local_var_params['style_id']  # noqa: E501
        if 'tile_matrix_set_id' in local_var_params:
            path_params['tileMatrixSetId'] = local_var_params['tile_matrix_set_id']  # noqa: E501
        if 'tile_matrix' in local_var_params:
            path_params['tileMatrix'] = local_var_params['tile_matrix']  # noqa: E501

        query_params = []
        if 'f' in local_var_params:
            query_params.append(('f', local_var_params['f']))  # noqa: E501
        if 'pretty' in local_var_params:
            query_params.append(('pretty', local_var_params['pretty']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/html', 'application/problem+json', 'text/xml', ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cwApiKeyHeader', 'cwApiKeyQuery', 'cwAuth', 'httpBearer', 'oauth2', 'openIdConnect', 'openIdConnect1']  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collectionId}/styles/{styleId}/map/tiles/{tileMatrixSetId}/{tileMatrix}/legend', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Tileset',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collections_collection_id_styles_style_id_map_tiles_tile_matrix_set_id_tile_matrix_tile_row_tile_col_get(self, collection_id, style_id, tile_matrix_set_id, tile_matrix, tile_row, tile_col, **kwargs):  # noqa: E501
        """A map tile of the specified collection in the specified style.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_id_styles_style_id_map_tiles_tile_matrix_set_id_tile_matrix_tile_row_tile_col_get(collection_id, style_id, tile_matrix_set_id, tile_matrix, tile_row, tile_col, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_id: The identifier of a collection in this data store. (required)
        :param str style_id: The identifier of a style in this data store that's compatible with the specified collection. (required)
        :param str tile_matrix_set_id: The identifier of a tile-matrix set that this collection is available in. (required)
        :param str tile_matrix: The identifier of a tile matrix (typically a zoom level) within the specified tile-matrix set. (required)
        :param int tile_row: The zero-based row index of the tile in the specified tile matrix. (required)
        :param int tile_col: The zero-based column index of the tile in the specified tile matrix. (required)
        :param str datetime: Either a date-time or an interval, open or closed. Date and time expressions adhere to RFC 3339.  Open intervals are expressed using double-dots.  Examples:  * A date-time: \"2018-02-12T23:20:50Z\" * A closed interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\" * Open intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"  Only elements that have a temporal property that intersects the value of `datetime` are selected.
        :param str style_id2: The identifier of a style in this data store that's compatible with the specified collection.  If no styleId parameter is present, the default style of the collection will be rendered.
        :param bool transparent: Whether or not the background of the image should be transparent (when supported by the requested image format).
        :param str bgcolor: Hexadecimal red-green-blue color value for the background color.  If not specified, the background color specified by the style (0xFFFFFF by default) will be used.
        :param str f: A token indicating the content type to return.  Overrides the HTTP \"Accept\" header if present.  A value of \"jop\" (content type \"image/x-jpegorpng\") indicates that either JPEG or PNG should be returned, whichever the server deems to be most appropriate for this tile.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collections_collection_id_styles_style_id_map_tiles_tile_matrix_set_id_tile_matrix_tile_row_tile_col_get_with_http_info(collection_id, style_id, tile_matrix_set_id, tile_matrix, tile_row, tile_col, **kwargs)  # noqa: E501
        else:
            (data) = self.collections_collection_id_styles_style_id_map_tiles_tile_matrix_set_id_tile_matrix_tile_row_tile_col_get_with_http_info(collection_id, style_id, tile_matrix_set_id, tile_matrix, tile_row, tile_col, **kwargs)  # noqa: E501
            return data

    def collections_collection_id_styles_style_id_map_tiles_tile_matrix_set_id_tile_matrix_tile_row_tile_col_get_with_http_info(self, collection_id, style_id, tile_matrix_set_id, tile_matrix, tile_row, tile_col, **kwargs):  # noqa: E501
        """A map tile of the specified collection in the specified style.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collections_collection_id_styles_style_id_map_tiles_tile_matrix_set_id_tile_matrix_tile_row_tile_col_get_with_http_info(collection_id, style_id, tile_matrix_set_id, tile_matrix, tile_row, tile_col, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collection_id: The identifier of a collection in this data store. (required)
        :param str style_id: The identifier of a style in this data store that's compatible with the specified collection. (required)
        :param str tile_matrix_set_id: The identifier of a tile-matrix set that this collection is available in. (required)
        :param str tile_matrix: The identifier of a tile matrix (typically a zoom level) within the specified tile-matrix set. (required)
        :param int tile_row: The zero-based row index of the tile in the specified tile matrix. (required)
        :param int tile_col: The zero-based column index of the tile in the specified tile matrix. (required)
        :param str datetime: Either a date-time or an interval, open or closed. Date and time expressions adhere to RFC 3339.  Open intervals are expressed using double-dots.  Examples:  * A date-time: \"2018-02-12T23:20:50Z\" * A closed interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\" * Open intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"  Only elements that have a temporal property that intersects the value of `datetime` are selected.
        :param str style_id2: The identifier of a style in this data store that's compatible with the specified collection.  If no styleId parameter is present, the default style of the collection will be rendered.
        :param bool transparent: Whether or not the background of the image should be transparent (when supported by the requested image format).
        :param str bgcolor: Hexadecimal red-green-blue color value for the background color.  If not specified, the background color specified by the style (0xFFFFFF by default) will be used.
        :param str f: A token indicating the content type to return.  Overrides the HTTP \"Accept\" header if present.  A value of \"jop\" (content type \"image/x-jpegorpng\") indicates that either JPEG or PNG should be returned, whichever the server deems to be most appropriate for this tile.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['collection_id', 'style_id', 'tile_matrix_set_id', 'tile_matrix', 'tile_row', 'tile_col', 'datetime', 'style_id2', 'transparent', 'bgcolor', 'f']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collections_collection_id_styles_style_id_map_tiles_tile_matrix_set_id_tile_matrix_tile_row_tile_col_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in local_var_params or
                local_var_params['collection_id'] is None):
            raise ApiValueError("Missing the required parameter `collection_id` when calling `collections_collection_id_styles_style_id_map_tiles_tile_matrix_set_id_tile_matrix_tile_row_tile_col_get`")  # noqa: E501
        # verify the required parameter 'style_id' is set
        if ('style_id' not in local_var_params or
                local_var_params['style_id'] is None):
            raise ApiValueError("Missing the required parameter `style_id` when calling `collections_collection_id_styles_style_id_map_tiles_tile_matrix_set_id_tile_matrix_tile_row_tile_col_get`")  # noqa: E501
        # verify the required parameter 'tile_matrix_set_id' is set
        if ('tile_matrix_set_id' not in local_var_params or
                local_var_params['tile_matrix_set_id'] is None):
            raise ApiValueError("Missing the required parameter `tile_matrix_set_id` when calling `collections_collection_id_styles_style_id_map_tiles_tile_matrix_set_id_tile_matrix_tile_row_tile_col_get`")  # noqa: E501
        # verify the required parameter 'tile_matrix' is set
        if ('tile_matrix' not in local_var_params or
                local_var_params['tile_matrix'] is None):
            raise ApiValueError("Missing the required parameter `tile_matrix` when calling `collections_collection_id_styles_style_id_map_tiles_tile_matrix_set_id_tile_matrix_tile_row_tile_col_get`")  # noqa: E501
        # verify the required parameter 'tile_row' is set
        if ('tile_row' not in local_var_params or
                local_var_params['tile_row'] is None):
            raise ApiValueError("Missing the required parameter `tile_row` when calling `collections_collection_id_styles_style_id_map_tiles_tile_matrix_set_id_tile_matrix_tile_row_tile_col_get`")  # noqa: E501
        # verify the required parameter 'tile_col' is set
        if ('tile_col' not in local_var_params or
                local_var_params['tile_col'] is None):
            raise ApiValueError("Missing the required parameter `tile_col` when calling `collections_collection_id_styles_style_id_map_tiles_tile_matrix_set_id_tile_matrix_tile_row_tile_col_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collection_id' in local_var_params:
            path_params['collectionId'] = local_var_params['collection_id']  # noqa: E501
        if 'style_id' in local_var_params:
            path_params['styleId'] = local_var_params['style_id']  # noqa: E501
        if 'tile_matrix_set_id' in local_var_params:
            path_params['tileMatrixSetId'] = local_var_params['tile_matrix_set_id']  # noqa: E501
        if 'tile_matrix' in local_var_params:
            path_params['tileMatrix'] = local_var_params['tile_matrix']  # noqa: E501
        if 'tile_row' in local_var_params:
            path_params['tileRow'] = local_var_params['tile_row']  # noqa: E501
        if 'tile_col' in local_var_params:
            path_params['tileCol'] = local_var_params['tile_col']  # noqa: E501

        query_params = []
        if 'datetime' in local_var_params:
            query_params.append(('datetime', local_var_params['datetime']))  # noqa: E501
        if 'style_id2' in local_var_params:
            query_params.append(('styleId', local_var_params['style_id2']))  # noqa: E501
        if 'transparent' in local_var_params:
            query_params.append(('transparent', local_var_params['transparent']))  # noqa: E501
        if 'bgcolor' in local_var_params:
            query_params.append(('bgcolor', local_var_params['bgcolor']))  # noqa: E501
        if 'f' in local_var_params:
            query_params.append(('f', local_var_params['f']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/x-jpegorpng', 'image/jpeg', 'image/png', 'image/gif', 'application/x-cubewerx-wkb', 'application/problem+json', 'text/xml', 'text/html', 'application/json', ])  # noqa: E501

        # Authentication setting
        auth_settings = ['cwApiKeyHeader', 'cwApiKeyQuery', 'cwAuth', 'httpBearer', 'oauth2', 'openIdConnect', 'openIdConnect1']  # noqa: E501

        return self.api_client.call_api(
            '/collections/{collectionId}/styles/{styleId}/map/tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
